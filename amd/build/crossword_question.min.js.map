<<<<<<< HEAD
{"version":3,"file":"crossword_question.min.js","sources":["../src/crossword_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * CrosswordQuestion base class handle every common function.\n *\n * @module qtype_crossword/crossword_question\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport class CrosswordQuestion {\n\n    // Arrow Left key.\n    ARROW_LEFT = 'ArrowLeft';\n\n    // Arrow Right key.\n    ARROW_RIGHT = 'ArrowRight';\n\n    // Arrow Up key.\n    ARROW_UP = 'ArrowUp';\n\n    // Arrow Down key.\n    ARROW_DOWN = 'ArrowDown';\n\n    // End key.\n    END = 'End';\n\n    // Home key.\n    HOME = 'Home';\n\n    // Delete key.\n    DELETE = 'Delete';\n\n    // Backspace key.\n    BACKSPACE = 'Backspace';\n\n    // Z key.\n    Z_KEY = 'z';\n\n    // A key.\n    A_KEY = 'a';\n\n    // Enter key.\n    ENTER = 'Enter';\n\n    /**\n     * Constructor for crossword question.\n     *\n     * @param {Object} options The input options for the crossword.\n     */\n    constructor(options) {\n        let defaultOption = {\n            colsNum: 10,\n            rowsNum: 10,\n            words: [],\n            target: '#crossword',\n            isPreview: false,\n            previewSetting: {backgroundColor: '#ffffff', borderColor: '#000000', textColor: '#ffffff', conflictColor: '#f4cece'},\n            cellWidth: 31,\n            cellHeight: 31,\n            wordNumber: -1,\n            coordinates: ''\n        };\n        // Merge options.\n        defaultOption = {...defaultOption, ...options};\n        // Set options.\n        this.options = defaultOption;\n        // Get target element.\n        const targetEls = document.querySelectorAll(defaultOption.target);\n        for (let i = 0; i < targetEls.length; i++) {\n            if (!targetEls[i].querySelector('svg')) {\n                this.crosswordEl = targetEls[i];\n                this.options.crosswordEl = targetEls[i];\n                if (!this.options.isPreview) {\n                    this.options.words = this.retrieveWordData();\n                }\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get word data.\n     *\n     * @return {Array} Word data list.\n     */\n    retrieveWordData() {\n        const clueEls = this.options.crosswordEl\n            .closest('.qtype_crossword-grid-wrapper')\n            .querySelectorAll('.contain-clue .wrap-clue');\n        if (clueEls.length === 0) {\n            return [];\n        }\n        return [...clueEls].map(el => {\n            const number = parseInt(el.dataset.questionid);\n            const startRow = parseInt(el.dataset.startrow);\n            const startColumn = parseInt(el.dataset.startcolumn);\n            const length = parseInt(el.dataset.length);\n            const orientation = parseInt(el.dataset.orientation);\n            const clue = el.dataset.clue;\n            return {number, startRow, startColumn, length, orientation, clue};\n        }).sort((clueA, clueB) => clueA.number - clueB.number);\n    }\n\n    /**\n     * Get alphabet character from position number.\n     *\n     * @param {Number} i Position character number.\n     * @return {String} Alphabet character.\n     */\n    getColumnLabel(i) {\n        return String.fromCharCode(\"A\".charCodeAt(0) + i - 1);\n    }\n\n    /**\n     * The answer must not contain any special character.\n     *\n     * @param {String} answer The answer string need to be check.\n     * @return {Boolean} The value data.\n     */\n    isInvalidAnswer = function(answer) {\n        return /[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi.test(answer);\n    };\n\n    /**\n     * Generate underscore letter by length.\n     *\n     * @param {Number} length Expected length.\n     *\n     * @return {String} Underscore string.\n     */\n    makeUnderscore(length) {\n        const arr = Array.from({length}, () => '_');\n        return arr.join('');\n    }\n\n    /**\n     * Update the letter index of the word based on the word selected.\n     *\n     * @param {Object} word The word object.\n     */\n    updateLetterIndexForCells(word) {\n        const {wordNumber} = this.options;\n        const letterList = this.options.crosswordEl.querySelectorAll(`g[data-word*='(${wordNumber})']`);\n        // Convert letterList to array to use sort function.\n        const letterListArray = Array.prototype.slice.call(letterList, 0);\n        let letterIndex = 0;\n        // Rearrange the letters in the correct order.\n        letterListArray.sort((a, b) => {\n            let aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'x'));\n            let bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'x'));\n            if (word.orientation) {\n                aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'y'));\n                bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'y'));\n            }\n            return aValue - bValue;\n        }).forEach(el => {\n            // Update letter index.\n            el.dataset.letterindex = letterIndex;\n            letterIndex++;\n        });\n    }\n\n    /**\n     * Toggle focus the clue.\n     */\n    focusClue() {\n        const {wordNumber} = this.options;\n        const containCrosswordEl = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper');\n        const clueEl = containCrosswordEl.querySelector(`.wrap-clue[data-questionid='${wordNumber}']`);\n        const clueFocusEl = containCrosswordEl.querySelector(`.wrap-clue.focus`);\n        // Remove the current focus cell.\n        if (clueFocusEl) {\n            clueFocusEl.classList.remove('focus');\n        }\n        // Add focus cell.\n        if (clueEl) {\n            clueEl.classList.add('focus');\n        }\n    }\n\n    /**\n     * Set sticky clue for the mobile version.\n     */\n    setStickyClue() {\n        const stickyClue = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelector('.sticky-clue');\n        const {wordNumber, words} = this.options;\n        const word = words.find(o => o.number === parseInt(wordNumber));\n        if (!stickyClue && word) {\n            return;\n        }\n        let strongEl = stickyClue.querySelector('strong');\n        let spanEl = stickyClue.querySelector('span');\n        if (!strongEl) {\n            strongEl = document.createElement('strong');\n            strongEl.classList.add('mr-1');\n            stickyClue.append(strongEl);\n        }\n        if (!spanEl) {\n            spanEl = document.createElement('span');\n            stickyClue.append(spanEl);\n        }\n        strongEl.innerText = `${word.number} ${this.options.orientation[word.orientation]}`;\n        spanEl.innerText = `${word.clue} (${word.length})`;\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {String} value The value string need to be replaced.\n     * @return {String} The value data.\n     */\n    replaceText(value) {\n        return value.replace(/[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi, '');\n    }\n\n    /**\n     * Bind data to the clue.\n     *\n     * @param {Element} gEl The word letter.\n     * @param {String} key The letter data.\n     */\n    bindDataToClueInput(gEl, key) {\n        const {words, cellWidth, cellHeight} = this.options;\n        const rectEl = gEl.querySelector('rect');\n        const conflictPointX = rectEl.getAttributeNS(null, 'x');\n        const conflictPointY = rectEl.getAttributeNS(null, 'y');\n        let letterIndex, value;\n        if (gEl) {\n            let wordIds = gEl.dataset.word.match(/\\d+/g);\n            wordIds.forEach(wordId => {\n                const word = words.find(o => o.number === parseInt(wordId));\n                if (word) {\n                    const startPoint = this.calculatePosition(word, 0);\n                    if (word.orientation) {\n                        letterIndex = (parseInt(conflictPointY) - startPoint.y) / (cellHeight + 1);\n                    } else {\n                        letterIndex = (parseInt(conflictPointX) - startPoint.x) / (cellWidth + 1);\n                    }\n                    const clueInputEl = this.options.crosswordEl\n                        .closest('.qtype_crossword-grid-wrapper')\n                        .querySelector(`.wrap-clue[data-questionid='${wordId}'] input`);\n                    value = this.replaceAt(clueInputEl.value, letterIndex, key);\n                    clueInputEl.value = value.toUpperCase();\n                }\n            });\n        }\n    }\n\n    /**\n     * Calculate the position of each letter of the word.\n     *\n     * @param {Object} word The current word object.\n     * @param {Number} key The letter index of word.\n     *\n     * @return {Object} The coordinates of letter.\n     */\n    calculatePosition(word, key) {\n        const {cellWidth, cellHeight} = this.options;\n        let x = (cellWidth * word.startColumn) + (word.startColumn + 1);\n        let y = (cellHeight * word.startRow) + (word.startRow + 1);\n        if (word.orientation) {\n            y += (key * cellHeight) + key;\n        } else {\n            x += (key * cellWidth) + key;\n        }\n        return {x, y};\n    }\n\n    /**\n     * Replace letter at index.\n     *\n     * @param {String} text Text need to be replaced.\n     * @param {Number} index Letter index.\n     * @param {String} char The replace letter.\n     *\n     * @return {String} Underscore string.\n     */\n    replaceAt(text, index, char) {\n        let a = text.split('');\n        if (a[index] !== undefined) {\n            a[index] = char;\n        }\n        return a.join('');\n    }\n\n    /**\n     * Sync data to crossword cell from text.\n     *\n     * @param {Element} text The text data.\n     * @param {Boolean} [bindClue=false] Check if bind data into clue.\n     */\n    syncLettersByText(text, bindClue = true) {\n        const {wordNumber} = this.options;\n        for (let i in text) {\n            const gEl = this.options.crosswordEl.querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${i}']`);\n            if (gEl) {\n                const letter = text[i].toUpperCase();\n                const textEl = gEl.querySelector('text.crossword-cell-text');\n                if (text[i] !== '_') {\n                    textEl.innerHTML = letter;\n                } else {\n                    textEl.innerHTML = '';\n                }\n                if (bindClue) {\n                    this.bindDataToClueInput(gEl, letter);\n                }\n            }\n        }\n    }\n\n    /**\n     * Toggle the highlight cells.\n     *\n     * @param {Object} word The word object.\n     * @param {Element} gEl The g element.\n     */\n    toggleHighlight(word, gEl) {\n        const {wordNumber, orientation, title} = this.options;\n        const focus = wordNumber;\n        const focusedEl = this.options.crosswordEl.querySelector('.crossword-cell-focussed');\n        if (focusedEl) {\n            focusedEl.classList.remove('crossword-cell-focussed');\n        }\n        // Remove current highlight cells.\n        this.options.crosswordEl.querySelectorAll('.crossword-cell-highlighted')\n            .forEach(el => el.classList.remove('crossword-cell-highlighted'));\n        // Set highlight cells.\n        this.options.crosswordEl.querySelectorAll(`g[data-word*='(${focus})'] rect`)\n            .forEach(el => {\n                    let titleData = '';\n                    if (el.closest('g').dataset.code === gEl.dataset.code) {\n                        el.classList.add('crossword-cell-focussed');\n                        // Update aria label.\n                        let letterIndex = parseInt(el.closest('g').dataset.letterindex);\n                        const data = {\n                            row: word.startRow + 1,\n                            column: word.startColumn + letterIndex + 1,\n                            number: word.number,\n                            orientation: orientation[word.orientation],\n                            clue: word.clue,\n                            letter: letterIndex + 1,\n                            count: word.length\n                        };\n                        if (word.orientation) {\n                            data.row = word.startRow + letterIndex + 1;\n                            data.column = word.startColumn + 1;\n                        }\n                        titleData = this.replaceStringData(title, data);\n                        this.options.crosswordEl.querySelector('input.crossword-hidden-input')\n                            .setAttributeNS(null, 'aria-label', titleData);\n\n                    } else {\n                        el.classList.add('crossword-cell-highlighted');\n                    }\n                }\n            );\n    }\n\n    /**\n     * Replace string data.\n     *\n     * @param {String} str The string need to be replaced.\n     * @param {Object} data The data.\n     *\n     * @return {String} The replaced string.\n     */\n    replaceStringData(str, data) {\n        for (let key in data) {\n            str = str.replace(`{${key}}`, data[key]);\n        }\n        return str;\n    }\n\n    /**\n     * Sync data between clue section and crossword.\n     */\n    syncDataForInit() {\n        const {words} = this.options;\n        // Loop every input into clue section.\n        this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelectorAll('.wrap-clue input')\n            .forEach(element => {\n                // Tricky, update word number.\n                this.options.wordNumber = parseInt(element.closest('.wrap-clue').dataset.questionid);\n                const word = words.find(o => o.number === this.options.wordNumber);\n                if (!word) {\n                    return;\n                }\n                // Sorting and Updating letter index.\n                this.updateLetterIndexForCells(word);\n                // The value will be filled into the valid cell.\n                this.syncLettersByText(element.value, false);\n            });\n        // Set wordNumber by default value.\n        this.options.wordNumber = -1;\n    }\n}\n"],"names":["constructor","options","answer","test","defaultOption","colsNum","rowsNum","words","target","isPreview","previewSetting","backgroundColor","borderColor","textColor","conflictColor","cellWidth","cellHeight","wordNumber","coordinates","targetEls","document","querySelectorAll","i","length","querySelector","crosswordEl","this","retrieveWordData","clueEls","closest","map","el","number","parseInt","dataset","questionid","startRow","startrow","startColumn","startcolumn","orientation","clue","sort","clueA","clueB","getColumnLabel","String","fromCharCode","charCodeAt","makeUnderscore","Array","from","join","updateLetterIndexForCells","word","letterList","letterListArray","prototype","slice","call","letterIndex","a","b","aValue","getAttributeNS","bValue","forEach","letterindex","focusClue","containCrosswordEl","clueEl","clueFocusEl","classList","remove","add","setStickyClue","stickyClue","find","o","strongEl","spanEl","createElement","append","innerText","replaceText","value","replace","bindDataToClueInput","gEl","key","rectEl","conflictPointX","conflictPointY","match","wordId","startPoint","calculatePosition","y","x","clueInputEl","replaceAt","toUpperCase","text","index","char","split","undefined","syncLettersByText","bindClue","letter","textEl","innerHTML","toggleHighlight","title","focus","focusedEl","titleData","code","data","row","column","count","replaceStringData","setAttributeNS","str","syncDataForInit","element"],"mappings":"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"}
=======
{"version":3,"file":"crossword_question.min.js","sources":["../src/crossword_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * CrosswordQuestion base class handle every common function.\n *\n * @module qtype_crossword/crossword_question\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport class CrosswordQuestion {\n\n    // Arrow Left key.\n    ARROW_LEFT = 'ArrowLeft';\n\n    // Arrow Right key.\n    ARROW_RIGHT = 'ArrowRight';\n\n    // Arrow Up key.\n    ARROW_UP = 'ArrowUp';\n\n    // Arrow Down key.\n    ARROW_DOWN = 'ArrowDown';\n\n    // End key.\n    END = 'End';\n\n    // Home key.\n    HOME = 'Home';\n\n    // Delete key.\n    DELETE = 'Delete';\n\n    // Backspace key.\n    BACKSPACE = 'Backspace';\n\n    // Z key.\n    Z_KEY = 'z';\n\n    // A key.\n    A_KEY = 'a';\n\n    // Enter key.\n    ENTER = 'Enter';\n\n    /**\n     * Constructor for crossword question.\n     *\n     * @param {Object} options The input options for the crossword.\n     */\n    constructor(options) {\n        let defaultOption = {\n            colsNum: 10,\n            rowsNum: 10,\n            words: [],\n            target: '#crossword',\n            isPreview: false,\n            previewSetting: {backgroundColor: '#ffffff', borderColor: '#000000', textColor: '#ffffff', conflictColor: '#f4cece'},\n            cellWidth: 31,\n            cellHeight: 31,\n            wordNumber: -1,\n            coordinates: ''\n        };\n        // Merge options.\n        defaultOption = {...defaultOption, ...options};\n        // Set options.\n        this.options = defaultOption;\n        // Get target element.\n        const targetEls = document.querySelectorAll(defaultOption.target);\n        for (let i = 0; i < targetEls.length; i++) {\n            if (!targetEls[i].querySelector('svg')) {\n                this.crosswordEl = targetEls[i];\n                this.options.crosswordEl = targetEls[i];\n                break;\n            }\n        }\n    }\n\n    /**\n     * Get column label by position.\n     *\n     * @param {Number} i Position character number.\n     * @return {String} Alphabet character.\n     */\n    getColumnLabel(i) {\n        let text = '';\n        let first = Math.ceil(i / 26) - 1;\n        let last = i % 26;\n\n        if (last === 0) {\n            last = 26;\n        }\n\n        if (first > 0) {\n            text = this.retrieveCharacterByIndex(first);\n        }\n        text += this.retrieveCharacterByIndex(last);\n        return text;\n    }\n\n    /**\n     * Get alphabet character by index.\n     *\n     * @param {Number} index Position character number.\n     * @return {String} Alphabet character.\n     */\n    retrieveCharacterByIndex(index) {\n        return String.fromCharCode(\"A\".charCodeAt(0) + index - 1);\n    }\n\n    /**\n     * The answer must not contain any special character.\n     *\n     * @param {String} answer The answer string need to be check.\n     * @return {Boolean} The value data.\n     */\n    isInvalidAnswer = function(answer) {\n        return /[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi.test(answer);\n    };\n\n    /**\n     * Generate underscore letter by length.\n     *\n     * @param {Number} length Expected length.\n     *\n     * @return {String} Underscore string.\n     */\n    makeUnderscore(length) {\n        const arr = Array.from({length}, () => '_');\n        return arr.join('');\n    }\n\n    /**\n     * Update the letter index of the word based on the word selected.\n     *\n     * @param {Object} word The word object.\n     */\n    updateLetterIndexForCells(word) {\n        const {wordNumber} = this.options;\n        const letterList = this.options.crosswordEl.querySelectorAll(`g[word*='(${wordNumber})']`);\n        // Convert letterList to array to use sort function.\n        const letterListArray = Array.prototype.slice.call(letterList, 0);\n        let letterIndex = 0;\n        // Rearrange the letters in the correct order.\n        letterListArray.sort((a, b) => {\n            let aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'x'));\n            let bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'x'));\n            if (word.orientation) {\n                aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'y'));\n                bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'y'));\n            }\n            return aValue - bValue;\n        }).forEach(el => {\n            // Update letter index.\n            el.setAttributeNS(null, 'letterIndex', letterIndex);\n            letterIndex++;\n        });\n    }\n\n    /**\n     * Toggle focus the clue.\n     */\n    focusClue() {\n        const {wordNumber} = this.options;\n        const containCrosswordEl = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper');\n        const clueEl = containCrosswordEl.querySelector(`.wrap-clue[data-questionid='${wordNumber}']`);\n        const clueFocusEl = containCrosswordEl.querySelector(`.wrap-clue.focus`);\n        // Remove the current focus cell.\n        if (clueFocusEl) {\n            clueFocusEl.classList.remove('focus');\n        }\n        // Add focus cell.\n        if (clueEl) {\n            clueEl.classList.add('focus');\n        }\n    }\n\n    /**\n     * Set sticky clue for the mobile version.\n     */\n    setStickyClue() {\n        const stickyClue = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelector('.sticky-clue');\n        const {wordNumber, words} = this.options;\n        const word = words.find(o => o.number === parseInt(wordNumber));\n        if (!stickyClue && word) {\n            return;\n        }\n        let strongEl = stickyClue.querySelector('strong');\n        let spanEl = stickyClue.querySelector('span');\n        if (!strongEl) {\n            strongEl = document.createElement('strong');\n            strongEl.classList.add('mr-1');\n            stickyClue.append(strongEl);\n        }\n        if (!spanEl) {\n            spanEl = document.createElement('span');\n            stickyClue.append(spanEl);\n        }\n        strongEl.innerText = `${word.number} ${this.options.orientation[word.orientation]}`;\n        spanEl.innerText = `${word.clue} (${word.length})`;\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {String} value The value string need to be replaced.\n     * @return {String} The value data.\n     */\n    replaceText(value) {\n        return value.replace(/[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi, '');\n    }\n\n    /**\n     * Bind data to the clue.\n     *\n     * @param {Element} gEl The word letter.\n     * @param {String} key The letter data.\n     */\n    bindDataToClueInput(gEl, key) {\n        const {words, cellWidth, cellHeight} = this.options;\n        const rectEl = gEl.querySelector('rect');\n        const conflictPointX = rectEl.getAttributeNS(null, 'x');\n        const conflictPointY = rectEl.getAttributeNS(null, 'y');\n        let letterIndex, value;\n        if (gEl) {\n            let wordIds = gEl.getAttributeNS(null, 'word').match(/\\d+/g);\n            wordIds.forEach(wordId => {\n                const word = words.find(o => o.number === parseInt(wordId));\n                if (word) {\n                    const startPoint = this.calculatePosition(word, 0);\n                    if (word.orientation) {\n                        letterIndex = (parseInt(conflictPointY) - startPoint.y) / (cellHeight + 1);\n                    } else {\n                        letterIndex = (parseInt(conflictPointX) - startPoint.x) / (cellWidth + 1);\n                    }\n                    const clueInputEl = this.options.crosswordEl\n                        .closest('.qtype_crossword-grid-wrapper')\n                        .querySelector(`.wrap-clue[data-questionid='${wordId}'] input`);\n                    value = this.replaceAt(clueInputEl.value, letterIndex, key);\n                    clueInputEl.value = value.toUpperCase();\n                }\n            });\n        }\n    }\n\n    /**\n     * Calculate the position of each letter of the word.\n     *\n     * @param {Object} word The current word object.\n     * @param {Number} key The letter index of word.\n     *\n     * @return {Object} The coordinates of letter.\n     */\n    calculatePosition(word, key) {\n        const {cellWidth, cellHeight} = this.options;\n        let x = (cellWidth * word.startColumn) + (word.startColumn + 1);\n        let y = (cellHeight * word.startRow) + (word.startRow + 1);\n        if (word.orientation) {\n            y += (key * cellHeight) + key;\n        } else {\n            x += (key * cellWidth) + key;\n        }\n        return {x, y};\n    }\n\n    /**\n     * Replace letter at index.\n     *\n     * @param {String} text Text need to be replaced.\n     * @param {Number} index Letter index.\n     * @param {String} char The replace letter.\n     *\n     * @return {String} Underscore string.\n     */\n    replaceAt(text, index, char) {\n        let a = text.split('');\n        if (a[index] !== undefined) {\n            a[index] = char;\n        }\n        return a.join('');\n    }\n\n    /**\n     * Sync data to crossword cell from text.\n     *\n     * @param {Element} text The text data.\n     * @param {Boolean} [bindClue=false] Check if bind data into clue.\n     */\n    syncLettersByText(text, bindClue = true) {\n        const {wordNumber} = this.options;\n        for (let i in text) {\n            const gEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${i}']`);\n            if (gEl) {\n                const letter = text[i].toUpperCase();\n                const textEl = gEl.querySelector('text.crossword-cell-text');\n                if (text[i] !== '_') {\n                    textEl.innerHTML = letter;\n                } else {\n                    textEl.innerHTML = '';\n                }\n                if (bindClue) {\n                    this.bindDataToClueInput(gEl, letter);\n                }\n            }\n        }\n    }\n\n    /**\n     * Toggle the highlight cells.\n     *\n     * @param {Object} word The word object.\n     * @param {Element} gEl The g element.\n     */\n    toggleHighlight(word, gEl) {\n        const {wordNumber, orientation, title} = this.options;\n        const focus = wordNumber;\n        const focusedEl = this.options.crosswordEl.querySelector('.crossword-cell-focussed');\n        if (focusedEl) {\n            focusedEl.classList.remove('crossword-cell-focussed');\n        }\n        // Remove current highlight cells.\n        this.options.crosswordEl.querySelectorAll('.crossword-cell-highlighted')\n            .forEach(el => el.classList.remove('crossword-cell-highlighted'));\n        // Set highlight cells.\n        this.options.crosswordEl.querySelectorAll(`g[word*='(${focus})'] rect`)\n            .forEach(el => {\n                    let titleData = '';\n                    if (el.closest('g').getAttributeNS(null, 'code') === gEl.getAttributeNS(null, 'code')) {\n                        el.classList.add('crossword-cell-focussed');\n                        // Update aria label.\n                        let letterIndex = parseInt(el.closest('g').getAttributeNS(null, 'letterIndex'));\n                        const data = {\n                            row: word.startRow + 1,\n                            column: word.startColumn + letterIndex + 1,\n                            number: word.number,\n                            orientation: orientation[word.orientation],\n                            clue: word.clue,\n                            letter: letterIndex + 1,\n                            count: word.length\n                        };\n                        if (word.orientation) {\n                            data.row = word.startRow + letterIndex + 1;\n                            data.column = word.startColumn + 1;\n                        }\n                        titleData = this.replaceStringData(title, data);\n                        this.options.crosswordEl.querySelector('input.crossword-hidden-input')\n                            .setAttributeNS(null, 'aria-label', titleData);\n\n                    } else {\n                        el.classList.add('crossword-cell-highlighted');\n                    }\n                }\n            );\n    }\n\n    /**\n     * Replace string data.\n     *\n     * @param {String} str The string need to be replaced.\n     * @param {Object} data The data.\n     *\n     * @return {String} The replaced string.\n     */\n    replaceStringData(str, data) {\n        for (let key in data) {\n            str = str.replace(`{${key}}`, data[key]);\n        }\n        return str;\n    }\n\n    /**\n     * Sync data between clue section and crossword.\n     */\n    syncDataForInit() {\n        const {words} = this.options;\n        // Loop every input into clue section.\n        this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelectorAll('.wrap-clue input')\n            .forEach(element => {\n                // Tricky, update word number.\n                this.options.wordNumber = parseInt(element.closest('.wrap-clue').getAttribute('data-questionid'));\n                const word = words.find(o => o.number === this.options.wordNumber);\n                if (!word) {\n                    return;\n                }\n                // Sorting and Updating letter index.\n                this.updateLetterIndexForCells(word);\n                // The value will be filled into the valid cell.\n                this.syncLettersByText(element.value, false);\n            });\n        // Set wordNumber by default value.\n        this.options.wordNumber = -1;\n    }\n}\n"],"names":["constructor","options","answer","test","defaultOption","colsNum","rowsNum","words","target","isPreview","previewSetting","backgroundColor","borderColor","textColor","conflictColor","cellWidth","cellHeight","wordNumber","coordinates","targetEls","document","querySelectorAll","i","length","querySelector","crosswordEl","getColumnLabel","text","first","Math","ceil","last","this","retrieveCharacterByIndex","index","String","fromCharCode","charCodeAt","makeUnderscore","Array","from","join","updateLetterIndexForCells","word","letterList","letterListArray","prototype","slice","call","letterIndex","sort","a","b","aValue","parseInt","getAttributeNS","bValue","orientation","forEach","el","setAttributeNS","focusClue","containCrosswordEl","closest","clueEl","clueFocusEl","classList","remove","add","setStickyClue","stickyClue","find","o","number","strongEl","spanEl","createElement","append","innerText","clue","replaceText","value","replace","bindDataToClueInput","gEl","key","rectEl","conflictPointX","conflictPointY","match","wordId","startPoint","calculatePosition","y","x","clueInputEl","replaceAt","toUpperCase","startColumn","startRow","char","split","undefined","syncLettersByText","bindClue","letter","textEl","innerHTML","toggleHighlight","title","focus","focusedEl","titleData","data","row","column","count","replaceStringData","str","syncDataForInit","element","getAttribute"],"mappings":";;;;;;;gIA+DIA,YAAYC,2CArCC,gDAGC,8CAGH,6CAGE,wCAGP,mCAGC,sCAGE,2CAGG,0CAGJ,kCAGA,kCAGA,iDAyEU,SAASC,cAChB,yCAAyCC,KAAKD,eAlEjDE,cAAgB,CAChBC,QAAS,GACTC,QAAS,GACTC,MAAO,GACPC,OAAQ,aACRC,WAAW,EACXC,eAAgB,CAACC,gBAAiB,UAAWC,YAAa,UAAWC,UAAW,UAAWC,cAAe,WAC1GC,UAAW,GACXC,WAAY,GACZC,YAAa,EACbC,YAAa,IAGjBd,cAAgB,IAAIA,iBAAkBH,cAEjCA,QAAUG,oBAETe,UAAYC,SAASC,iBAAiBjB,cAAcI,YACrD,IAAIc,EAAI,EAAGA,EAAIH,UAAUI,OAAQD,QAC7BH,UAAUG,GAAGE,cAAc,OAAQ,MAC/BC,YAAcN,UAAUG,QACxBrB,QAAQwB,YAAcN,UAAUG,UAYjDI,eAAeJ,OACPK,KAAO,GACPC,MAAQC,KAAKC,KAAKR,EAAI,IAAM,EAC5BS,KAAOT,EAAI,UAEF,IAATS,OACAA,KAAO,IAGPH,MAAQ,IACRD,KAAOK,KAAKC,yBAAyBL,QAEzCD,MAAQK,KAAKC,yBAAyBF,MAC/BJ,KASXM,yBAAyBC,cACdC,OAAOC,aAAa,IAAIC,WAAW,GAAKH,MAAQ,GAoB3DI,eAAef,eACCgB,MAAMC,KAAK,CAACjB,OAAAA,SAAS,IAAM,MAC5BkB,KAAK,IAQpBC,0BAA0BC,YAChB1B,WAACA,YAAce,KAAK/B,QACpB2C,WAAaZ,KAAK/B,QAAQwB,YAAYJ,qCAA8BJ,mBAEpE4B,gBAAkBN,MAAMO,UAAUC,MAAMC,KAAKJ,WAAY,OAC3DK,YAAc,EAElBJ,gBAAgBK,MAAK,CAACC,EAAGC,SACjBC,OAASC,SAASH,EAAE3B,cAAc,QAAQ+B,eAAe,KAAM,MAC/DC,OAASF,SAASF,EAAE5B,cAAc,QAAQ+B,eAAe,KAAM,aAC/DZ,KAAKc,cACLJ,OAASC,SAASH,EAAE3B,cAAc,QAAQ+B,eAAe,KAAM,MAC/DC,OAASF,SAASF,EAAE5B,cAAc,QAAQ+B,eAAe,KAAM,OAE5DF,OAASG,UACjBE,SAAQC,KAEPA,GAAGC,eAAe,KAAM,cAAeX,aACvCA,iBAORY,kBACU5C,WAACA,YAAce,KAAK/B,QACpB6D,mBAAqB9B,KAAK/B,QAAQwB,YAAYsC,QAAQ,iCACtDC,OAASF,mBAAmBtC,oDAA6CP,kBACzEgD,YAAcH,mBAAmBtC,kCAEnCyC,aACAA,YAAYC,UAAUC,OAAO,SAG7BH,QACAA,OAAOE,UAAUE,IAAI,SAO7BC,sBACUC,WAAatC,KAAK/B,QAAQwB,YAAYsC,QAAQ,iCAAiCvC,cAAc,iBAC7FP,WAACA,WAADV,MAAaA,OAASyB,KAAK/B,QAC3B0C,KAAOpC,MAAMgE,MAAKC,GAAKA,EAAEC,SAAWnB,SAASrC,kBAC9CqD,YAAc3B,gBAGf+B,SAAWJ,WAAW9C,cAAc,UACpCmD,OAASL,WAAW9C,cAAc,QACjCkD,WACDA,SAAWtD,SAASwD,cAAc,UAClCF,SAASR,UAAUE,IAAI,QACvBE,WAAWO,OAAOH,WAEjBC,SACDA,OAASvD,SAASwD,cAAc,QAChCN,WAAWO,OAAOF,SAEtBD,SAASI,oBAAenC,KAAK8B,mBAAUzC,KAAK/B,QAAQwD,YAAYd,KAAKc,cACrEkB,OAAOG,oBAAenC,KAAKoC,kBAASpC,KAAKpB,YAS7CyD,YAAYC,cACDA,MAAMC,QAAQ,yCAA0C,IASnEC,oBAAoBC,IAAKC,WACf9E,MAACA,MAADQ,UAAQA,UAARC,WAAmBA,YAAcgB,KAAK/B,QACtCqF,OAASF,IAAI5D,cAAc,QAC3B+D,eAAiBD,OAAO/B,eAAe,KAAM,KAC7CiC,eAAiBF,OAAO/B,eAAe,KAAM,SAC/CN,YAAagC,SACbG,IAAK,CACSA,IAAI7B,eAAe,KAAM,QAAQkC,MAAM,QAC7C/B,SAAQgC,eACN/C,KAAOpC,MAAMgE,MAAKC,GAAKA,EAAEC,SAAWnB,SAASoC,aAC/C/C,KAAM,OACAgD,WAAa3D,KAAK4D,kBAAkBjD,KAAM,GAE5CM,YADAN,KAAKc,aACUH,SAASkC,gBAAkBG,WAAWE,IAAM7E,WAAa,IAEzDsC,SAASiC,gBAAkBI,WAAWG,IAAM/E,UAAY,SAErEgF,YAAc/D,KAAK/B,QAAQwB,YAC5BsC,QAAQ,iCACRvC,oDAA6CkE,oBAClDT,MAAQjD,KAAKgE,UAAUD,YAAYd,MAAOhC,YAAaoC,KACvDU,YAAYd,MAAQA,MAAMgB,mBAc1CL,kBAAkBjD,KAAM0C,WACdtE,UAACA,UAADC,WAAYA,YAAcgB,KAAK/B,YACjC6F,EAAK/E,UAAY4B,KAAKuD,aAAgBvD,KAAKuD,YAAc,GACzDL,EAAK7E,WAAa2B,KAAKwD,UAAaxD,KAAKwD,SAAW,UACpDxD,KAAKc,YACLoC,GAAMR,IAAMrE,WAAcqE,IAE1BS,GAAMT,IAAMtE,UAAasE,IAEtB,CAACS,EAAAA,EAAGD,EAAAA,GAYfG,UAAUrE,KAAMO,MAAOkE,UACfjD,EAAIxB,KAAK0E,MAAM,gBACFC,IAAbnD,EAAEjB,SACFiB,EAAEjB,OAASkE,MAERjD,EAAEV,KAAK,IASlB8D,kBAAkB5E,UAAM6E,0EACdvF,WAACA,YAAce,KAAK/B,YACrB,IAAIqB,KAAKK,KAAM,OACVyD,IAAMpD,KAAK/B,QAAQwB,YAAYD,kCAA2BP,uCAA8BK,YAC1F8D,IAAK,OACCqB,OAAS9E,KAAKL,GAAG2E,cACjBS,OAAStB,IAAI5D,cAAc,4BACjB,MAAZG,KAAKL,GACLoF,OAAOC,UAAYF,OAEnBC,OAAOC,UAAY,GAEnBH,eACKrB,oBAAoBC,IAAKqB,UAY9CG,gBAAgBjE,KAAMyC,WACZnE,WAACA,WAADwC,YAAaA,YAAboD,MAA0BA,OAAS7E,KAAK/B,QACxC6G,MAAQ7F,WACR8F,UAAY/E,KAAK/B,QAAQwB,YAAYD,cAAc,4BACrDuF,WACAA,UAAU7C,UAAUC,OAAO,gCAG1BlE,QAAQwB,YAAYJ,iBAAiB,+BACrCqC,SAAQC,IAAMA,GAAGO,UAAUC,OAAO,qCAElClE,QAAQwB,YAAYJ,qCAA8ByF,mBAClDpD,SAAQC,SACGqD,UAAY,MACZrD,GAAGI,QAAQ,KAAKR,eAAe,KAAM,UAAY6B,IAAI7B,eAAe,KAAM,QAAS,CACnFI,GAAGO,UAAUE,IAAI,+BAEbnB,YAAcK,SAASK,GAAGI,QAAQ,KAAKR,eAAe,KAAM,sBAC1D0D,KAAO,CACTC,IAAKvE,KAAKwD,SAAW,EACrBgB,OAAQxE,KAAKuD,YAAcjD,YAAc,EACzCwB,OAAQ9B,KAAK8B,OACbhB,YAAaA,YAAYd,KAAKc,aAC9BsB,KAAMpC,KAAKoC,KACX0B,OAAQxD,YAAc,EACtBmE,MAAOzE,KAAKpB,QAEZoB,KAAKc,cACLwD,KAAKC,IAAMvE,KAAKwD,SAAWlD,YAAc,EACzCgE,KAAKE,OAASxE,KAAKuD,YAAc,GAErCc,UAAYhF,KAAKqF,kBAAkBR,MAAOI,WACrChH,QAAQwB,YAAYD,cAAc,gCAClCoC,eAAe,KAAM,aAAcoD,gBAGxCrD,GAAGO,UAAUE,IAAI,iCAcrCiD,kBAAkBC,IAAKL,UACd,IAAI5B,OAAO4B,KACZK,IAAMA,IAAIpC,mBAAYG,SAAQ4B,KAAK5B,aAEhCiC,IAMXC,wBACUhH,MAACA,OAASyB,KAAK/B,aAEhBA,QAAQwB,YAAYsC,QAAQ,iCAAiC1C,iBAAiB,oBAC9EqC,SAAQ8D,eAEAvH,QAAQgB,WAAaqC,SAASkE,QAAQzD,QAAQ,cAAc0D,aAAa,0BACxE9E,KAAOpC,MAAMgE,MAAKC,GAAKA,EAAEC,SAAWzC,KAAK/B,QAAQgB,aAClD0B,YAIAD,0BAA0BC,WAE1B4D,kBAAkBiB,QAAQvC,OAAO,YAGzChF,QAAQgB,YAAc"}
>>>>>>> d50ce65 (Increase maximum cols/row to 30)
