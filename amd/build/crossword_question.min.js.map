{"version":3,"file":"crossword_question.min.js","sources":["../src/crossword_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * CrosswordQuestion base class handle every common function.\r\n *\r\n * @module qtype_crossword/crossword_question\r\n * @copyright 2022 The Open University\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nexport class CrosswordQuestion {\r\n\r\n    // Arrow Left key.\r\n    ARROW_LEFT = 'ArrowLeft';\r\n\r\n    // Arrow Right key.\r\n    ARROW_RIGHT = 'ArrowRight';\r\n\r\n    // Arrow Up key.\r\n    ARROW_UP = 'ArrowUp';\r\n\r\n    // Arrow Down key.\r\n    ARROW_DOWN = 'ArrowDown';\r\n\r\n    // End key.\r\n    END = 'End';\r\n\r\n    // Home key.\r\n    HOME = 'Home';\r\n\r\n    // Delete key.\r\n    DELETE = 'Delete';\r\n\r\n    // Backspace key.\r\n    BACKSPACE = 'Backspace';\r\n\r\n    // Z key.\r\n    Z_KEY = 'z';\r\n\r\n    // A key.\r\n    A_KEY = 'a';\r\n\r\n    // Enter key.\r\n    ENTER = 'Enter';\r\n\r\n    /**\r\n     * Constructor for crossword question.\r\n     *\r\n     * @param {Object} options The input options for the crossword.\r\n     */\r\n    constructor(options) {\r\n        let defaultOption = {\r\n            colsNum: 10,\r\n            rowsNum: 10,\r\n            words: [],\r\n            target: '#crossword',\r\n            isPreview: false,\r\n            previewSetting: {backgroundColor: '#ffffff', borderColor: '#000000', textColor: '#ffffff', conflictColor: '#f4cece'},\r\n            cellWidth: 31,\r\n            cellHeight: 31,\r\n            wordNumber: -1,\r\n            coordinates: ''\r\n        };\r\n        // Merge options.\r\n        defaultOption = {...defaultOption, ...options};\r\n        // Set options.\r\n        this.options = defaultOption;\r\n        // Get target element.\r\n        const targetEls = document.querySelectorAll(defaultOption.target);\r\n        for (let i = 0; i < targetEls.length; i++) {\r\n            if (!targetEls[i].querySelector('svg')) {\r\n                this.crosswordEl = targetEls[i];\r\n                this.options.crosswordEl = targetEls[i];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get column label by position.\r\n     *\r\n     * @param {Number} i Position character number.\r\n     * @return {String} Alphabet character.\r\n     */\r\n    getColumnLabel(i) {\r\n        let text = '';\r\n        let first = Math.ceil(i / 26) - 1;\r\n        let last = i % 26;\r\n\r\n        if (last === 0) {\r\n            last = 26;\r\n        }\r\n\r\n        if (first > 0) {\r\n            text = this.retrieveCharacterByIndex(first);\r\n        }\r\n        text += this.retrieveCharacterByIndex(last);\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Get alphabet character by index.\r\n     *\r\n     * @param {Number} index Position character number.\r\n     * @return {String} Alphabet character.\r\n     */\r\n    retrieveCharacterByIndex(index) {\r\n        return String.fromCharCode(\"A\".charCodeAt(0) + index - 1);\r\n    }\r\n\r\n    /**\r\n     * The answer must not contain any special character.\r\n     *\r\n     * @param {String} answer The answer string need to be check.\r\n     * @return {Boolean} The value data.\r\n     */\r\n    isInvalidAnswer = function(answer) {\r\n        return /[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi.test(answer);\r\n    };\r\n\r\n    /**\r\n     * Generate underscore letter by length.\r\n     *\r\n     * @param {Number} length Expected length.\r\n     *\r\n     * @return {String} Underscore string.\r\n     */\r\n    makeUnderscore(length) {\r\n        const arr = Array.from({length}, () => '_');\r\n        return arr.join('');\r\n    }\r\n\r\n    /**\r\n     * Update the letter index of the word based on the word selected.\r\n     *\r\n     * @param {Object} word The word object.\r\n     */\r\n    updateLetterIndexForCells(word) {\r\n        const {wordNumber} = this.options;\r\n        const letterList = this.options.crosswordEl.querySelectorAll(`g[word*='(${wordNumber})']`);\r\n        // Convert letterList to array to use sort function.\r\n        const letterListArray = Array.prototype.slice.call(letterList, 0);\r\n        let letterIndex = 0;\r\n        // Rearrange the letters in the correct order.\r\n        letterListArray.sort((a, b) => {\r\n            let aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'x'));\r\n            let bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'x'));\r\n            if (word.orientation) {\r\n                aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'y'));\r\n                bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'y'));\r\n            }\r\n            return aValue - bValue;\r\n        }).forEach(el => {\r\n            // Update letter index.\r\n            el.setAttributeNS(null, 'letterIndex', letterIndex);\r\n            letterIndex++;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Toggle focus the clue.\r\n     */\r\n    focusClue() {\r\n        const {wordNumber} = this.options;\r\n        const containCrosswordEl = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper');\r\n        const clueEl = containCrosswordEl.querySelector(`.wrap-clue[data-questionid='${wordNumber}']`);\r\n        const clueFocusEl = containCrosswordEl.querySelector(`.wrap-clue.focus`);\r\n        // Remove the current focus cell.\r\n        if (clueFocusEl) {\r\n            clueFocusEl.classList.remove('focus');\r\n        }\r\n        // Add focus cell.\r\n        if (clueEl) {\r\n            clueEl.classList.add('focus');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set sticky clue for the mobile version.\r\n     */\r\n    setStickyClue() {\r\n        const stickyClue = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelector('.sticky-clue');\r\n        const {wordNumber, words} = this.options;\r\n        const word = words.find(o => o.number === parseInt(wordNumber));\r\n        if (!stickyClue && word) {\r\n            return;\r\n        }\r\n        let strongEl = stickyClue.querySelector('strong');\r\n        let spanEl = stickyClue.querySelector('span');\r\n        if (!strongEl) {\r\n            strongEl = document.createElement('strong');\r\n            strongEl.classList.add('mr-1');\r\n            stickyClue.append(strongEl);\r\n        }\r\n        if (!spanEl) {\r\n            spanEl = document.createElement('span');\r\n            stickyClue.append(spanEl);\r\n        }\r\n        strongEl.innerText = `${word.number} ${this.options.orientation[word.orientation]}`;\r\n        spanEl.innerText = `${word.clue} (${word.length})`;\r\n    }\r\n\r\n    /**\r\n     * Focus crossword cell from the start index.\r\n     *\r\n     * @param {String} value The value string need to be replaced.\r\n     * @return {String} The value data.\r\n     */\r\n    replaceText(value) {\r\n        return value.replace(/[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi, '');\r\n    }\r\n\r\n    /**\r\n     * Bind data to the clue.\r\n     *\r\n     * @param {Element} gEl The word letter.\r\n     * @param {String} key The letter data.\r\n     */\r\n    bindDataToClueInput(gEl, key) {\r\n        const {words, cellWidth, cellHeight} = this.options;\r\n        const rectEl = gEl.querySelector('rect');\r\n        const conflictPointX = rectEl.getAttributeNS(null, 'x');\r\n        const conflictPointY = rectEl.getAttributeNS(null, 'y');\r\n        let letterIndex, value;\r\n        if (gEl) {\r\n            let wordIds = gEl.getAttributeNS(null, 'word').match(/\\d+/g);\r\n            wordIds.forEach(wordId => {\r\n                const word = words.find(o => o.number === parseInt(wordId));\r\n                if (word) {\r\n                    const startPoint = this.calculatePosition(word, 0);\r\n                    if (word.orientation) {\r\n                        letterIndex = (parseInt(conflictPointY) - startPoint.y) / (cellHeight + 1);\r\n                    } else {\r\n                        letterIndex = (parseInt(conflictPointX) - startPoint.x) / (cellWidth + 1);\r\n                    }\r\n                    const clueInputEl = this.options.crosswordEl\r\n                        .closest('.qtype_crossword-grid-wrapper')\r\n                        .querySelector(`.wrap-clue[data-questionid='${wordId}'] input`);\r\n                    value = this.replaceAt(clueInputEl.value, letterIndex, key);\r\n                    clueInputEl.value = value.toUpperCase();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate the position of each letter of the word.\r\n     *\r\n     * @param {Object} word The current word object.\r\n     * @param {Number} key The letter index of word.\r\n     *\r\n     * @return {Object} The coordinates of letter.\r\n     */\r\n    calculatePosition(word, key) {\r\n        const {cellWidth, cellHeight} = this.options;\r\n        let x = (cellWidth * word.startColumn) + (word.startColumn + 1);\r\n        let y = (cellHeight * word.startRow) + (word.startRow + 1);\r\n        if (word.orientation) {\r\n            y += (key * cellHeight) + key;\r\n        } else {\r\n            x += (key * cellWidth) + key;\r\n        }\r\n        return {x, y};\r\n    }\r\n\r\n    /**\r\n     * Replace letter at index.\r\n     *\r\n     * @param {String} text Text need to be replaced.\r\n     * @param {Number} index Letter index.\r\n     * @param {String} char The replace letter.\r\n     *\r\n     * @return {String} Underscore string.\r\n     */\r\n    replaceAt(text, index, char) {\r\n        let a = text.split('');\r\n        if (a[index] !== undefined) {\r\n            a[index] = char;\r\n        }\r\n        return a.join('');\r\n    }\r\n\r\n    /**\r\n     * Sync data to crossword cell from text.\r\n     *\r\n     * @param {Element} text The text data.\r\n     * @param {Boolean} [bindClue=false] Check if bind data into clue.\r\n     */\r\n    syncLettersByText(text, bindClue = true) {\r\n        const {wordNumber} = this.options;\r\n        for (let i in text) {\r\n            const gEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${i}']`);\r\n            if (gEl) {\r\n                const letter = text[i].toUpperCase();\r\n                const textEl = gEl.querySelector('text.crossword-cell-text');\r\n                if (text[i] !== '_') {\r\n                    textEl.innerHTML = letter;\r\n                } else {\r\n                    textEl.innerHTML = '';\r\n                }\r\n                if (bindClue) {\r\n                    this.bindDataToClueInput(gEl, letter);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle the highlight cells.\r\n     *\r\n     * @param {Object} word The word object.\r\n     * @param {Element} gEl The g element.\r\n     */\r\n    toggleHighlight(word, gEl) {\r\n        const {wordNumber, orientation, title} = this.options;\r\n        const focus = wordNumber;\r\n        const focusedEl = this.options.crosswordEl.querySelector('.crossword-cell-focussed');\r\n        if (focusedEl) {\r\n            focusedEl.classList.remove('crossword-cell-focussed');\r\n        }\r\n        // Remove current highlight cells.\r\n        this.options.crosswordEl.querySelectorAll('.crossword-cell-highlighted')\r\n            .forEach(el => el.classList.remove('crossword-cell-highlighted'));\r\n        // Set highlight cells.\r\n        this.options.crosswordEl.querySelectorAll(`g[word*='(${focus})'] rect`)\r\n            .forEach(el => {\r\n                    let titleData = '';\r\n                    if (el.closest('g').getAttributeNS(null, 'code') === gEl.getAttributeNS(null, 'code')) {\r\n                        el.classList.add('crossword-cell-focussed');\r\n                        // Update aria label.\r\n                        let letterIndex = parseInt(el.closest('g').getAttributeNS(null, 'letterIndex'));\r\n                        const data = {\r\n                            row: word.startRow + 1,\r\n                            column: word.startColumn + letterIndex + 1,\r\n                            number: word.number,\r\n                            orientation: orientation[word.orientation],\r\n                            clue: word.clue,\r\n                            letter: letterIndex + 1,\r\n                            count: word.length\r\n                        };\r\n                        if (word.orientation) {\r\n                            data.row = word.startRow + letterIndex + 1;\r\n                            data.column = word.startColumn + 1;\r\n                        }\r\n                        titleData = this.replaceStringData(title, data);\r\n                        this.options.crosswordEl.querySelector('input.crossword-hidden-input')\r\n                            .setAttributeNS(null, 'aria-label', titleData);\r\n\r\n                    } else {\r\n                        el.classList.add('crossword-cell-highlighted');\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Replace string data.\r\n     *\r\n     * @param {String} str The string need to be replaced.\r\n     * @param {Object} data The data.\r\n     *\r\n     * @return {String} The replaced string.\r\n     */\r\n    replaceStringData(str, data) {\r\n        for (let key in data) {\r\n            str = str.replace(`{${key}}`, data[key]);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Sync data between clue section and crossword.\r\n     */\r\n    syncDataForInit() {\r\n        const {words} = this.options;\r\n        // Loop every input into clue section.\r\n        this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelectorAll('.wrap-clue input')\r\n            .forEach(element => {\r\n                // Tricky, update word number.\r\n                this.options.wordNumber = parseInt(element.closest('.wrap-clue').getAttribute('data-questionid'));\r\n                const word = words.find(o => o.number === this.options.wordNumber);\r\n                if (!word) {\r\n                    return;\r\n                }\r\n                // Sorting and Updating letter index.\r\n                this.updateLetterIndexForCells(word);\r\n                // The value will be filled into the valid cell.\r\n                this.syncLettersByText(element.value, false);\r\n            });\r\n        // Set wordNumber by default value.\r\n        this.options.wordNumber = -1;\r\n    }\r\n}\r\n"],"names":["constructor","options","answer","test","defaultOption","colsNum","rowsNum","words","target","isPreview","previewSetting","backgroundColor","borderColor","textColor","conflictColor","cellWidth","cellHeight","wordNumber","coordinates","targetEls","document","querySelectorAll","i","length","querySelector","crosswordEl","getColumnLabel","text","first","Math","ceil","last","this","retrieveCharacterByIndex","index","String","fromCharCode","charCodeAt","makeUnderscore","Array","from","join","updateLetterIndexForCells","word","letterList","letterListArray","prototype","slice","call","letterIndex","sort","a","b","aValue","parseInt","getAttributeNS","bValue","orientation","forEach","el","setAttributeNS","focusClue","containCrosswordEl","closest","clueEl","clueFocusEl","classList","remove","add","setStickyClue","stickyClue","find","o","number","strongEl","spanEl","createElement","append","innerText","clue","replaceText","value","replace","bindDataToClueInput","gEl","key","rectEl","conflictPointX","conflictPointY","match","wordId","startPoint","calculatePosition","y","x","clueInputEl","replaceAt","toUpperCase","startColumn","startRow","char","split","undefined","syncLettersByText","bindClue","letter","textEl","innerHTML","toggleHighlight","title","focus","focusedEl","titleData","data","row","column","count","replaceStringData","str","syncDataForInit","element","getAttribute"],"mappings":"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"}