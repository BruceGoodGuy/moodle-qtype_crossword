{"version":3,"file":"crossword_question.min.js","sources":["../src/crossword_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * CrosswordQuestion base class handle every common function.\r\n *\r\n * @module qtype_crossword/crossword_question\r\n * @copyright 2022 The Open University\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nexport class CrosswordQuestion {\r\n\r\n    // Arrow Left key.\r\n    ARROW_LEFT = 'ArrowLeft';\r\n\r\n    // Arrow Right key.\r\n    ARROW_RIGHT = 'ArrowRight';\r\n\r\n    // Arrow Up key.\r\n    ARROW_UP = 'ArrowUp';\r\n\r\n    // Arrow Down key.\r\n    ARROW_DOWN = 'ArrowDown';\r\n\r\n    // End key.\r\n    END = 'End';\r\n\r\n    // Home key.\r\n    HOME = 'Home';\r\n\r\n    // Delete key.\r\n    DELETE = 'Delete';\r\n\r\n    // Backspace key.\r\n    BACKSPACE = 'Backspace';\r\n\r\n    // Z key.\r\n    Z_KEY = 'z';\r\n\r\n    // A key.\r\n    A_KEY = 'a';\r\n\r\n    // Enter key.\r\n    ENTER = 'Enter';\r\n\r\n    // Maximum row of crossword.\r\n    MAX_ROW = 30;\r\n\r\n    /**\r\n     * Constructor for crossword question.\r\n     *\r\n     * @param {Object} options The input options for the crossword.\r\n     */\r\n    constructor(options) {\r\n        let defaultOption = {\r\n            colsNum: 10,\r\n            rowsNum: 10,\r\n            words: [],\r\n            target: '#crossword',\r\n            isPreview: false,\r\n            previewSetting: {backgroundColor: '#ffffff', borderColor: '#000000', textColor: '#ffffff', conflictColor: '#f4cece'},\r\n            cellWidth: 31,\r\n            cellHeight: 31,\r\n            wordNumber: -1,\r\n            coordinates: '',\r\n            maxSizeCell: 50,\r\n            minSizeCell: 30,\r\n        };\r\n        // Merge options.\r\n        defaultOption = {...defaultOption, ...options};\r\n        // Set options.\r\n        this.options = defaultOption;\r\n        // Get target element.\r\n        const targetEls = document.querySelectorAll(defaultOption.target);\r\n        for (let i = 0; i < targetEls.length; i++) {\r\n            if (!targetEls[i].querySelector('svg')) {\r\n                this.crosswordEl = targetEls[i];\r\n                this.options.crosswordEl = targetEls[i];\r\n                if (!this.options.isPreview) {\r\n                    this.options.words = this.retrieveWordData();\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get word data.\r\n     *\r\n     * @return {Array} Word data list.\r\n     */\r\n    retrieveWordData() {\r\n        const clueEls = this.options.crosswordEl\r\n            .closest('.qtype_crossword-grid-wrapper')\r\n            .querySelectorAll('.contain-clue .wrap-clue');\r\n        if (clueEls.length === 0) {\r\n            return [];\r\n        }\r\n        return [...clueEls].map(el => {\r\n            const number = parseInt(el.dataset.questionid);\r\n            const startRow = parseInt(el.dataset.startrow);\r\n            const startColumn = parseInt(el.dataset.startcolumn);\r\n            const length = parseInt(el.dataset.length);\r\n            const orientation = parseInt(el.dataset.orientation);\r\n            const clue = el.dataset.clue;\r\n            return {number, startRow, startColumn, length, orientation, clue};\r\n        }).sort((clueA, clueB) => clueA.number - clueB.number);\r\n    }\r\n\r\n    /**\r\n     * Get alphabet character from the index.\r\n     *\r\n     * @param {Number} index The character index number start from 0.\r\n     *\r\n     * @return {String} Alphabet character, In case index number higher than 25,\r\n     *  we will add one letter before the current one like Excel: AA, AB, AC, AD, AE etc.\r\n     */\r\n    getColumnLabel(index) {\r\n        let text = '';\r\n\r\n        // Get the integer of division and subtraction by 1,\r\n        // The firstLetterIndex will start from -1\r\n        // and increments every index adding more 26.\r\n        const firstLetterIndex = Math.trunc(index / 26) - 1;\r\n\r\n        // Get remainder from division result.\r\n        // The lastLetterIndex value is the index of the second letter.\r\n        let lastLetterIndex = index % 26;\r\n\r\n        // In case firstLetterIndex < -1 we will not show the first letter.\r\n        if (firstLetterIndex > -1) {\r\n            text = this.retrieveCharacterByIndex(firstLetterIndex);\r\n        }\r\n        // Adding the last letter.\r\n        text += this.retrieveCharacterByIndex(lastLetterIndex);\r\n\r\n        return text;\r\n    }\r\n\r\n    /**\r\n     * Get alphabet character by index.\r\n     *\r\n     * @param {Number} index Position character number.\r\n     * @return {String} Alphabet character.\r\n     */\r\n    retrieveCharacterByIndex(index) {\r\n        return String.fromCharCode(\"A\".charCodeAt(0) + index);\r\n    }\r\n\r\n    /**\r\n     * The answer must not contain any special character.\r\n     *\r\n     * @param {String} answer The answer string need to be check.\r\n     * @return {Boolean} The value data.\r\n     */\r\n    isInvalidAnswer = function(answer) {\r\n        return /[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi.test(answer);\r\n    };\r\n\r\n    /**\r\n     * Generate underscore letter by length.\r\n     *\r\n     * @param {Number} length Expected length.\r\n     *\r\n     * @return {String} Underscore string.\r\n     */\r\n    makeUnderscore(length) {\r\n        const arr = Array.from({length}, () => '_');\r\n        return arr.join('');\r\n    }\r\n\r\n    /**\r\n     * Update the letter index of the word based on the word selected.\r\n     *\r\n     * @param {Object} word The word object.\r\n     */\r\n    updateLetterIndexForCells(word) {\r\n        const {wordNumber} = this.options;\r\n        const letterList = this.options.crosswordEl.querySelectorAll(`g[data-word*='(${wordNumber})']`);\r\n        // Convert letterList to array to use sort function.\r\n        const letterListArray = Array.prototype.slice.call(letterList, 0);\r\n        let letterIndex = 0;\r\n        // Rearrange the letters in the correct order.\r\n        letterListArray.sort((a, b) => {\r\n            let aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'x'));\r\n            let bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'x'));\r\n            if (word.orientation) {\r\n                aValue = parseInt(a.querySelector('rect').getAttributeNS(null, 'y'));\r\n                bValue = parseInt(b.querySelector('rect').getAttributeNS(null, 'y'));\r\n            }\r\n            return aValue - bValue;\r\n        }).forEach(el => {\r\n            // Update letter index.\r\n            el.dataset.letterindex = letterIndex;\r\n            letterIndex++;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Toggle focus the clue.\r\n     */\r\n    focusClue() {\r\n        const {wordNumber} = this.options;\r\n        const containCrosswordEl = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper');\r\n        const clueEl = containCrosswordEl.querySelector(`.wrap-clue[data-questionid='${wordNumber}']`);\r\n        const clueFocusEl = containCrosswordEl.querySelector(`.wrap-clue.focus`);\r\n        // Remove the current focus cell.\r\n        if (clueFocusEl) {\r\n            clueFocusEl.classList.remove('focus');\r\n        }\r\n        // Add focus cell.\r\n        if (clueEl) {\r\n            clueEl.classList.add('focus');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set sticky clue for the mobile version.\r\n     */\r\n    setStickyClue() {\r\n        const stickyClue = this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelector('.sticky-clue');\r\n        const {wordNumber, words} = this.options;\r\n        const word = words.find(o => o.number === parseInt(wordNumber));\r\n        if (!stickyClue && word) {\r\n            return;\r\n        }\r\n        let strongEl = stickyClue.querySelector('strong');\r\n        let spanEl = stickyClue.querySelector('span');\r\n        if (!strongEl) {\r\n            strongEl = document.createElement('strong');\r\n            strongEl.classList.add('mr-1');\r\n            stickyClue.append(strongEl);\r\n        }\r\n        if (!spanEl) {\r\n            spanEl = document.createElement('span');\r\n            stickyClue.append(spanEl);\r\n        }\r\n        strongEl.innerText = `${word.number} ${this.options.orientation[word.orientation]}`;\r\n        spanEl.innerText = `${word.clue} (${word.length})`;\r\n    }\r\n\r\n    /**\r\n     * Focus crossword cell from the start index.\r\n     *\r\n     * @param {String} value The value string need to be replaced.\r\n     * @return {String} The value data.\r\n     */\r\n    replaceText(value) {\r\n        return value.replace(/[-@!$%^&*()_+|~=`\\\\#{}[\\]:\";'<>?,./]/gi, '');\r\n    }\r\n\r\n    /**\r\n     * Bind data to the clue.\r\n     *\r\n     * @param {Element} gEl The word letter.\r\n     * @param {String} key The letter data.\r\n     */\r\n    bindDataToClueInput(gEl, key) {\r\n        const {words, cellWidth, cellHeight} = this.options;\r\n        const rectEl = gEl.querySelector('rect');\r\n        const conflictPointX = rectEl.getAttributeNS(null, 'x');\r\n        const conflictPointY = rectEl.getAttributeNS(null, 'y');\r\n        let letterIndex, value;\r\n        if (gEl) {\r\n            let wordIds = gEl.dataset.word.match(/\\d+/g);\r\n            wordIds.forEach(wordId => {\r\n                const word = words.find(o => o.number === parseInt(wordId));\r\n                if (word) {\r\n                    const startPoint = this.calculatePosition(word, 0);\r\n                    if (word.orientation) {\r\n                        letterIndex = (parseInt(conflictPointY) - startPoint.y) / (cellHeight + 1);\r\n                    } else {\r\n                        letterIndex = (parseInt(conflictPointX) - startPoint.x) / (cellWidth + 1);\r\n                    }\r\n                    const clueInputEl = this.options.crosswordEl\r\n                        .closest('.qtype_crossword-grid-wrapper')\r\n                        .querySelector(`.wrap-clue[data-questionid='${wordId}'] input`);\r\n                    // Replace spaces with an underscore character before binding to the answer input.\r\n                    if (key === ' ') {\r\n                        key = '_';\r\n                    }\r\n                    value = this.replaceAt(clueInputEl.value, letterIndex, key);\r\n                    clueInputEl.value = value.toUpperCase() + this.makeUnderscore(word.length - value.length);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculate the position of each letter of the word.\r\n     *\r\n     * @param {Object} word The current word object.\r\n     * @param {Number} key The letter index of word.\r\n     *\r\n     * @return {Object} The coordinates of letter.\r\n     */\r\n    calculatePosition(word, key) {\r\n        const {cellWidth, cellHeight} = this.options;\r\n        let x = (cellWidth * word.startColumn) + (word.startColumn + 1);\r\n        let y = (cellHeight * word.startRow) + (word.startRow + 1);\r\n        if (word.orientation) {\r\n            y += (key * cellHeight) + key;\r\n        } else {\r\n            x += (key * cellWidth) + key;\r\n        }\r\n        return {x, y};\r\n    }\r\n\r\n    /**\r\n     * Replace letter at index.\r\n     *\r\n     * @param {String} text Text need to be replaced.\r\n     * @param {Number} index Letter index.\r\n     * @param {String} char The replace letter.\r\n     *\r\n     * @return {String} Underscore string.\r\n     */\r\n    replaceAt(text, index, char) {\r\n        let a = text.split('');\r\n        if (a[index] !== undefined) {\r\n            a[index] = char;\r\n        }\r\n        return a.join('');\r\n    }\r\n\r\n    /**\r\n     * Sync data to crossword cell from text.\r\n     *\r\n     * @param {String} text The text data.\r\n     * @param {Boolean} skipEmptyData Allow skip rendering blank answers,\r\n     *      if false, we will update the crossword grid even if the answer input is blank.\r\n     * @return {Boolean} Is valid text string.\r\n     */\r\n    syncLettersByText(text, skipEmptyData = true) {\r\n        const {wordNumber} = this.options;\r\n        // Skip empty string.\r\n        if (text.replace(/_/g, '').length === 0 && skipEmptyData) {\r\n            return false;\r\n        }\r\n        for (let i in text) {\r\n            const gEl = this.options.crosswordEl.querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${i}']`);\r\n            if (gEl) {\r\n                const letter = text[i].toUpperCase();\r\n                const textEl = gEl.querySelector('text.crossword-cell-text');\r\n                if (text[i] !== '_') {\r\n                    textEl.innerHTML = letter;\r\n                } else {\r\n                    textEl.innerHTML = '';\r\n                }\r\n                this.bindDataToClueInput(gEl, letter);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Toggle the highlight cells.\r\n     *\r\n     * @param {Object} word The word object.\r\n     * @param {Element} gEl The g element.\r\n     */\r\n    toggleHighlight(word, gEl) {\r\n        const {wordNumber, orientation, title} = this.options;\r\n        const focus = wordNumber;\r\n        const focusedEl = this.options.crosswordEl.querySelector('.crossword-cell-focussed');\r\n        if (focusedEl) {\r\n            focusedEl.classList.remove('crossword-cell-focussed');\r\n        }\r\n        // Remove current highlight cells.\r\n        this.options.crosswordEl.querySelectorAll('.crossword-cell-highlighted')\r\n            .forEach(el => el.classList.remove('crossword-cell-highlighted'));\r\n        // Set highlight cells.\r\n        this.options.crosswordEl.querySelectorAll(`g[data-word*='(${focus})'] rect`)\r\n            .forEach(el => {\r\n                    let titleData = '';\r\n                    if (el.closest('g').dataset.code === gEl.dataset.code) {\r\n                        el.classList.add('crossword-cell-focussed');\r\n                        // Update aria label.\r\n                        let letterIndex = parseInt(el.closest('g').dataset.letterindex);\r\n                        const data = {\r\n                            row: word.startRow + 1,\r\n                            column: word.startColumn + letterIndex + 1,\r\n                            number: word.number,\r\n                            orientation: orientation[word.orientation],\r\n                            clue: word.clue,\r\n                            letter: letterIndex + 1,\r\n                            count: word.length\r\n                        };\r\n                        if (word.orientation) {\r\n                            data.row = word.startRow + letterIndex + 1;\r\n                            data.column = word.startColumn + 1;\r\n                        }\r\n                        titleData = this.replaceStringData(title, data);\r\n                        this.options.crosswordEl.querySelector('input.crossword-hidden-input')\r\n                            .setAttributeNS(null, 'aria-label', titleData);\r\n\r\n                    } else {\r\n                        el.classList.add('crossword-cell-highlighted');\r\n                    }\r\n                }\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Replace string data.\r\n     *\r\n     * @param {String} str The string need to be replaced.\r\n     * @param {Object} data The data.\r\n     *\r\n     * @return {String} The replaced string.\r\n     */\r\n    replaceStringData(str, data) {\r\n        for (let key in data) {\r\n            str = str.replace(`{${key}}`, data[key]);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    /**\r\n     * Sync data between clue section and crossword.\r\n     */\r\n    syncDataForInit() {\r\n        const {words} = this.options;\r\n        // Loop every input into clue section.\r\n        this.options.crosswordEl.closest('.qtype_crossword-grid-wrapper').querySelectorAll('.wrap-clue input')\r\n            .forEach(element => {\r\n                // Tricky, update word number.\r\n                this.options.wordNumber = parseInt(element.closest('.wrap-clue').dataset.questionid);\r\n                const word = words.find(o => o.number === this.options.wordNumber);\r\n                if (!word) {\r\n                    return;\r\n                }\r\n                // Sorting and Updating letter index.\r\n                this.updateLetterIndexForCells(word);\r\n                // The value will be filled into the valid cell.\r\n                this.syncLettersByText(element.value);\r\n            });\r\n        // Set wordNumber by default value.\r\n        this.options.wordNumber = -1;\r\n    }\r\n\r\n    /**\r\n     * Set size for crossword.\r\n     *\r\n     * @param {Element} svg The svg element.\r\n     * @return {Element} The svg element after set size.\r\n     */\r\n    setSizeForCrossword(svg) {\r\n        const {colsNum, maxSizeCell, minSizeCell} = this.options;\r\n        // Get max width and min width for crossword with current max cell size and min cell size.\r\n        const maxWidth = colsNum * (maxSizeCell + 1) + 1;\r\n        const minWidth = colsNum * (minSizeCell + 1) + 1;\r\n        // To avoid the case that the crossword has too high a height when we have many rows (eg 30) and too few columns (eg 3).\r\n        // We will limit the maximum height of the crossword.\r\n        // This reduces the size of the crossword but still ensures that the size of each cell keep in the range min and max sizes.\r\n        const maxHeight = this.MAX_ROW * (minSizeCell + 1) + 1;\r\n        svg.style.cssText = `max-width: ${maxWidth}px; min-width: ${minWidth}px;\r\n            max-height: ${maxHeight}px;`;\r\n        return svg;\r\n    }\r\n}\r\n"],"names":["constructor","options","answer","test","defaultOption","colsNum","rowsNum","words","target","isPreview","previewSetting","backgroundColor","borderColor","textColor","conflictColor","cellWidth","cellHeight","wordNumber","coordinates","maxSizeCell","minSizeCell","targetEls","document","querySelectorAll","i","length","querySelector","crosswordEl","this","retrieveWordData","clueEls","closest","map","el","number","parseInt","dataset","questionid","startRow","startrow","startColumn","startcolumn","orientation","clue","sort","clueA","clueB","getColumnLabel","index","text","firstLetterIndex","Math","trunc","lastLetterIndex","retrieveCharacterByIndex","String","fromCharCode","charCodeAt","makeUnderscore","Array","from","join","updateLetterIndexForCells","word","letterList","letterListArray","prototype","slice","call","letterIndex","a","b","aValue","getAttributeNS","bValue","forEach","letterindex","focusClue","containCrosswordEl","clueEl","clueFocusEl","classList","remove","add","setStickyClue","stickyClue","find","o","strongEl","spanEl","createElement","append","innerText","replaceText","value","replace","bindDataToClueInput","gEl","key","rectEl","conflictPointX","conflictPointY","match","wordId","startPoint","calculatePosition","y","x","clueInputEl","replaceAt","toUpperCase","char","split","undefined","syncLettersByText","skipEmptyData","letter","textEl","innerHTML","toggleHighlight","title","focus","focusedEl","titleData","code","data","row","column","count","replaceStringData","setAttributeNS","str","syncDataForInit","element","setSizeForCrossword","svg","maxWidth","minWidth","maxHeight","MAX_ROW","style","cssText"],"mappings":"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"}