<<<<<<< HEAD
{"version":3,"file":"crossword_clue.min.js","sources":["../src/crossword_clue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Crossword clue class, handle any action relative to clue.\n *\n * @module qtype_crossword/crossword_clue\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\n\nexport class CrosswordClue extends CrosswordQuestion {\n\n    /**\n     * Constructor.\n     *\n     * @param {Object} options The settings for crossword.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Set up for clue section.\n     */\n    setUpClue() {\n        let {words, readonly} = this.options;\n        const clueEls = this.options.crosswordEl\n            .closest('.qtype_crossword-grid-wrapper')\n            .querySelectorAll('.contain-clue .wrap-clue');\n        clueEls.forEach(el => {\n            const questionId = el.dataset.questionid;\n            let word = words.find(o => o.number === parseInt(questionId));\n            if (word) {\n                const inputEl = el.querySelector('input');\n                inputEl.value += this.makeUnderscore(word.length - inputEl.value.length);\n                if (!readonly) {\n                    inputEl.disabled = false;\n                }\n                // Add event for input.\n                this.addEventForClueInput(inputEl, word);\n            }\n        });\n    }\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} el The input element.\n     * @param {String} word The word data.\n     */\n    addEventForClueInput(el, word) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        el.addEventListener('click', (e) => {\n            let startIndex = e.target.selectionStart;\n            if (startIndex >= word.length) {\n                startIndex = word.length - 1;\n            }\n            this.focusCellByStartIndex(startIndex, word);\n            this.focusClue();\n            this.setStickyClue();\n        });\n\n        el.addEventListener('focus', (e) => {\n            e.target.dispatchEvent(new Event('click'));\n        });\n\n        el.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let {key, target} = e;\n            let startIndex = target.selectionStart;\n            key = this.replaceText(key);\n            if (key === '') {\n                return;\n            }\n            const gEl = this.options.crosswordEl\n                    .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n            if (gEl) {\n                gEl.querySelector('text.crossword-cell-text').innerHTML = key.toUpperCase();\n                this.bindDataToClueInput(gEl, key.toUpperCase());\n            }\n            // Go to next letter.\n            startIndex++;\n            const nexEl = this.options.crosswordEl\n                    .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n            if (nexEl) {\n                this.toggleHighlight(word, nexEl);\n                target.setSelectionRange(startIndex, startIndex);\n            }\n        });\n\n        el.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const {key, target} = event;\n            let {value} = target;\n            if ([this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\n                const startIndex = target.selectionStart;\n                const gEl = this.options.crosswordEl\n                        .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n                if (gEl) {\n                    this.toggleHighlight(word, gEl);\n                }\n            }\n            if (key === this.DELETE || key === this.BACKSPACE) {\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                let startIndex = target.selectionStart;\n                if (!word) {\n                    return;\n                }\n                const selectionLength = word.length - value.length;\n                const underScore = this.makeUnderscore(selectionLength);\n                value = [value.slice(0, startIndex), underScore, value.slice(startIndex)].join('');\n                target.value = value;\n                this.syncLettersByText(value);\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (key === this.END || key === this.HOME) {\n                let startIndex = 0;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                if (!word) {\n                    return;\n                }\n                if (key === this.END) {\n                    startIndex = word.length - 1;\n                }\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n        });\n\n        el.addEventListener('paste', (event) => {\n            event.preventDefault();\n            let value = (event.clipboardData || window.clipboardData).getData('text');\n            value = this.replaceText(value);\n            this.syncLettersByText(value);\n        });\n\n        el.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key.toLowerCase() === this.Z_KEY) {\n                e.preventDefault();\n            }\n            if (e.key === this.ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        el.addEventListener('cut', (event) => {\n            const selectString = document.getSelection().toString();\n            const startIndex = event.target.selectionStart;\n            let {value} = event.target;\n            value = value.substring(0, startIndex) +\n                value.substring(startIndex + selectString.length) +\n                this.makeUnderscore(selectString.length);\n            event.target.value = value;\n            event.clipboardData.setData('text/plain', selectString);\n            event.preventDefault();\n            event.target.setSelectionRange(startIndex, startIndex);\n            this.syncLettersByText(value);\n        });\n    }\n\n    /**\n     * Focus cell base on the start index.\n     *\n     * @param {Element} startIndex The start index.\n     * @param {String} word The word data.\n     */\n    focusCellByStartIndex(startIndex, word) {\n        let position = this.calculatePosition(word, startIndex);\n        const rect = this.options.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\n        if (rect) {\n            this.options.wordNumber = word.number;\n            this.toggleHighlight(word, rect.closest('g'));\n            this.updateLetterIndexForCells(word);\n        }\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {Element} target The element.\n     * @param {Number} startIndex The start index.\n     */\n    syncFocusCellAndInput(target, startIndex) {\n        const {wordNumber} = this.options;\n        const gEl = this.options.crosswordEl.querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n        target.setSelectionRange(startIndex, startIndex);\n        if (gEl) {\n            this.toggleFocus(gEl);\n        }\n    }\n\n    /**\n     * Toggle the focus cell.\n     *\n     * @param {Element} gEl The word letter.\n     */\n    toggleFocus(gEl) {\n        const focused = this.options.crosswordEl.querySelector('g rect.crossword-cell-focussed');\n        if (focused) {\n            focused.classList.remove('crossword-cell-focussed');\n            focused.classList.add('crossword-cell-highlighted');\n        }\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\n    }\n}\n"],"names":["CrosswordClue","CrosswordQuestion","constructor","options","setUpClue","words","readonly","this","crosswordEl","closest","querySelectorAll","forEach","el","questionId","dataset","questionid","word","find","o","number","parseInt","inputEl","querySelector","value","makeUnderscore","length","disabled","addEventForClueInput","addEventListener","e","startIndex","target","selectionStart","focusCellByStartIndex","focusClue","setStickyClue","dispatchEvent","Event","preventDefault","wordNumber","key","replaceText","gEl","innerHTML","toUpperCase","bindDataToClueInput","nexEl","toggleHighlight","setSelectionRange","event","ARROW_LEFT","ARROW_RIGHT","includes","DELETE","BACKSPACE","selectionLength","underScore","slice","join","syncLettersByText","syncFocusCellAndInput","END","HOME","clipboardData","window","getData","ctrlKey","toLowerCase","Z_KEY","ENTER","selectString","document","getSelection","toString","substring","setData","position","calculatePosition","rect","x","y","updateLetterIndexForCells","toggleFocus","focused","classList","remove","add"],"mappings":"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"}
=======
<<<<<<< HEAD
{"version":3,"file":"crossword_clue.min.js","sources":["../src/crossword_clue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Crossword clue class, handle any action relative to clue.\n *\n * @module qtype_crossword/crossword_clue\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\n\nexport class CrosswordClue extends CrosswordQuestion {\n\n    /**\n     * Constructor.\n     *\n     * @param {Object} options The settings for crossword.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Set up for clue section.\n     */\n    setUpClue() {\n        let {words, readonly} = this.options;\n        const clueEls = this.options.crosswordEl\n            .closest('.qtype_crossword-grid-wrapper')\n            .querySelectorAll('.contain-clue .wrap-clue');\n        clueEls.forEach(el => {\n            const questionId = el.dataset.questionid;\n            let word = words.find(o => o.number === parseInt(questionId));\n            if (word) {\n                const inputEl = el.querySelector('input');\n                inputEl.value += this.makeUnderscore(word.length - inputEl.value.length);\n                if (!readonly) {\n                    inputEl.disabled = false;\n                }\n                // Add event for input.\n                this.addEventForClueInput(inputEl, word);\n            }\n        });\n    }\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} el The input element.\n     * @param {String} word The word data.\n     */\n    addEventForClueInput(el, word) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        el.addEventListener('click', (e) => {\n            let startIndex = e.target.selectionStart;\n            if (startIndex >= word.length) {\n                startIndex = word.length - 1;\n            }\n            this.focusCellByStartIndex(startIndex, word);\n            this.focusClue();\n            this.setStickyClue();\n        });\n\n        el.addEventListener('focus', (e) => {\n            e.target.dispatchEvent(new Event('click'));\n        });\n\n        el.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let {key, target} = e;\n            let startIndex = target.selectionStart;\n            key = this.replaceText(key);\n            if (key === '') {\n                return;\n            }\n            const gEl = this.options.crosswordEl\n                    .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n            if (gEl) {\n                gEl.querySelector('text.crossword-cell-text').innerHTML = key.toUpperCase();\n                this.bindDataToClueInput(gEl, key.toUpperCase());\n            }\n            // Go to next letter.\n            startIndex++;\n            const nexEl = this.options.crosswordEl\n                    .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n            if (nexEl) {\n                this.toggleHighlight(word, nexEl);\n                target.setSelectionRange(startIndex, startIndex);\n            }\n        });\n\n        el.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const {key, target} = event;\n            let {value} = target;\n            if ([this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\n                const startIndex = target.selectionStart;\n                const gEl = this.options.crosswordEl\n                        .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n                if (gEl) {\n                    this.toggleHighlight(word, gEl);\n                }\n            }\n            if (key === this.DELETE || key === this.BACKSPACE) {\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                let startIndex = target.selectionStart;\n                if (!word) {\n                    return;\n                }\n                value = value + this.makeUnderscore(word.length - value.length);\n                target.value = value;\n                this.syncLettersByText(value);\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (key === this.END || key === this.HOME) {\n                let startIndex = 0;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                if (!word) {\n                    return;\n                }\n                if (key === this.END) {\n                    startIndex = word.length - 1;\n                }\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n        });\n\n        el.addEventListener('paste', (event) => {\n            event.preventDefault();\n            let value = (event.clipboardData || window.clipboardData).getData('text');\n            value = this.replaceText(value);\n            this.syncLettersByText(value);\n        });\n\n        el.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key.toLowerCase() === this.Z_KEY) {\n                e.preventDefault();\n            }\n            if (e.key === this.ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        el.addEventListener('cut', (event) => {\n            const selectString = document.getSelection().toString();\n            const startIndex = event.target.selectionStart;\n            let {value} = event.target;\n            value = value.substring(0, startIndex) +\n                value.substring(startIndex + selectString.length) +\n                this.makeUnderscore(selectString.length);\n            event.target.value = value;\n            event.clipboardData.setData('text/plain', selectString);\n            event.preventDefault();\n            event.target.setSelectionRange(startIndex, startIndex);\n            this.syncLettersByText(value);\n        });\n    }\n\n    /**\n     * Focus cell base on the start index.\n     *\n     * @param {Element} startIndex The start index.\n     * @param {String} word The word data.\n     */\n    focusCellByStartIndex(startIndex, word) {\n        let position = this.calculatePosition(word, startIndex);\n        const rect = this.options.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\n        if (rect) {\n            this.options.wordNumber = word.number;\n            this.toggleHighlight(word, rect.closest('g'));\n            this.updateLetterIndexForCells(word);\n        }\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {Element} target The element.\n     * @param {Number} startIndex The start index.\n     */\n    syncFocusCellAndInput(target, startIndex) {\n        const {wordNumber} = this.options;\n        const gEl = this.options.crosswordEl.querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n        target.setSelectionRange(startIndex, startIndex);\n        if (gEl) {\n            this.toggleFocus(gEl);\n        }\n    }\n\n    /**\n     * Toggle the focus cell.\n     *\n     * @param {Element} gEl The word letter.\n     */\n    toggleFocus(gEl) {\n        const focused = this.options.crosswordEl.querySelector('g rect.crossword-cell-focussed');\n        if (focused) {\n            focused.classList.remove('crossword-cell-focussed');\n            focused.classList.add('crossword-cell-highlighted');\n        }\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\n    }\n}\n"],"names":["CrosswordClue","CrosswordQuestion","constructor","options","setUpClue","words","readonly","this","crosswordEl","closest","querySelectorAll","forEach","el","questionId","dataset","questionid","word","find","o","number","parseInt","inputEl","querySelector","value","makeUnderscore","length","disabled","addEventForClueInput","addEventListener","e","startIndex","target","selectionStart","focusCellByStartIndex","focusClue","setStickyClue","dispatchEvent","Event","preventDefault","wordNumber","key","replaceText","gEl","innerHTML","toUpperCase","bindDataToClueInput","nexEl","toggleHighlight","setSelectionRange","event","ARROW_LEFT","ARROW_RIGHT","includes","DELETE","BACKSPACE","syncLettersByText","syncFocusCellAndInput","END","HOME","clipboardData","window","getData","ctrlKey","toLowerCase","Z_KEY","ENTER","selectString","document","getSelection","toString","substring","setData","position","calculatePosition","rect","x","y","updateLetterIndexForCells","toggleFocus","focused","classList","remove","add"],"mappings":"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"}
=======
{"version":3,"file":"crossword_clue.min.js","sources":["../src/crossword_clue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Crossword clue class, handle any action relative to clue.\n *\n * @module qtype_crossword/crossword_clue\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\n\nexport class CrosswordClue extends CrosswordQuestion {\n\n    /**\n     * Constructor.\n     *\n     * @param {Object} options The settings for crossword.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Set up for clue section.\n     */\n    setUpClue() {\n        let {words, readonly} = this.options;\n        const clueEls = this.options.crosswordEl\n            .closest('.qtype_crossword-grid-wrapper')\n            .querySelectorAll('.contain-clue .wrap-clue');\n        clueEls.forEach(el => {\n            const questionId = el.getAttribute('data-questionid');\n            let word = words.find(o => o.number === parseInt(questionId));\n            if (word) {\n                const inputEl = el.querySelector('input');\n                inputEl.value += this.makeUnderscore(word.length - inputEl.value.length);\n                if (!readonly) {\n                    inputEl.disabled = false;\n                }\n                // Add event for input.\n                this.addEventForClueInput(inputEl, word);\n            }\n        });\n    }\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} el The input element.\n     * @param {String} word The word data.\n     */\n    addEventForClueInput(el, word) {\n        const {readonly} = this.options;\n        let startSelection = 0;\n        if (readonly) {\n            return;\n        }\n        el.addEventListener('click', (e) => {\n            let startIndex = e.target.selectionStart;\n            if (startIndex >= word.length) {\n                startIndex = word.length - 1;\n            }\n            this.focusCellByStartIndex(startIndex, word);\n            this.focusClue();\n            this.setStickyClue();\n        });\n\n        el.addEventListener('focus', (e) => {\n            e.target.dispatchEvent(new Event('click'));\n        });\n\n        el.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let {key, target} = e;\n            let startIndex = target.selectionStart;\n            key = this.replaceText(key);\n            if (key === '') {\n                return;\n            }\n            this.handleTypingData(e, wordNumber, word, startIndex, key);\n        });\n\n        el.addEventListener('compositionstart', (evt) => {\n            const selection = evt.target.selectionStart;\n            startSelection = selection;\n        });\n\n        el.addEventListener('compositionend', (evt) => {\n            evt.preventDefault();\n            evt.stopPropagation();\n            const {wordNumber} = this.options;\n            const selection = evt.target.selectionStart;\n            let key = evt.data;\n            let currentSelection = startSelection;\n            evt.target.setSelectionRange(selection, selection);\n            key.split('').forEach(char => {\n                const result = this.handleTypingData(evt, wordNumber, word, currentSelection, char);\n                if (result) {\n                    currentSelection++;\n                }\n            });\n        });\n\n        el.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const {key, target} = event;\n            let {value} = target;\n            let isValidKey = false;\n            let maxLength = parseInt(target.getAttribute('maxlength'));\n            if ([this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\n                isValidKey = true;\n                const startIndex = target.selectionStart;\n                const gEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n                if (gEl) {\n                    this.toggleHighlight(word, gEl);\n                }\n            }\n            if (key === this.DELETE || key === this.BACKSPACE) {\n                isValidKey = true;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                let startIndex = target.selectionStart;\n                if (!word) {\n                    return;\n                }\n                value = value + this.makeUnderscore(word.length - value.length);\n                target.value = value;\n                this.syncLettersByText(value);\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (key === this.END || key === this.HOME) {\n                isValidKey = true;\n                let startIndex = 0;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                if (!word) {\n                    return;\n                }\n                if (key === this.END) {\n                    startIndex = word.length - 1;\n                }\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (!isValidKey && startSelection >= maxLength) {\n                event.target.value = value.slice(0, maxLength);\n            }\n        });\n\n        el.addEventListener('paste', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let selection = event.target.selectionStart;\n            let value = (event.clipboardData || window.clipboardData).getData('text');\n            value = this.replaceText(value);\n            if (value === \"\") {\n                return;\n            }\n            value.split('').forEach(char => {\n                const result = this.handleTypingData(event, wordNumber, word, selection, char);\n                if (result) {\n                    selection++;\n                }\n            });\n        });\n\n        el.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key.toLowerCase() === this.Z_KEY) {\n                e.preventDefault();\n            }\n            if (e.key === this.ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        el.addEventListener('cut', (event) => {\n            const selectString = document.getSelection().toString();\n            const startIndex = event.target.selectionStart;\n            let {value} = event.target;\n            value = value.substring(0, startIndex) +\n                value.substring(startIndex + selectString.length) +\n                this.makeUnderscore(selectString.length);\n            event.target.value = value;\n            event.clipboardData.setData('text/plain', selectString);\n            event.preventDefault();\n            event.target.setSelectionRange(startIndex, startIndex);\n            this.syncLettersByText(value);\n        });\n    }\n\n    /**\n     * Handle typing data.\n     *\n     * @param {Object} evt Event data.\n     * @param {Number} wordNumber The word number.\n     * @param {Object} word The word object.\n     * @param {Number} selectionIndex The position of cursor selection.\n     * @param {String} char The character.\n     *\n     * @return {Boolean} True if the data is valid.\n     */\n    handleTypingData(evt, wordNumber, word, selectionIndex, char) {\n        const gelEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${selectionIndex}']`);\n        if (this.replaceText(char) === '') {\n            return false;\n        }\n        if (gelEl) {\n            gelEl.querySelector('text.crossword-cell-text').innerHTML = char.toUpperCase();\n            this.bindDataToClueInput(gelEl, char.toUpperCase());\n        }\n        selectionIndex++;\n\n        // Go to next letter.\n        const nexEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${selectionIndex}']`);\n        if (nexEl) {\n            this.toggleHighlight(word, nexEl);\n            evt.target.setSelectionRange(selectionIndex, selectionIndex);\n        }\n        return true;\n    }\n\n    /**\n     * Focus cell base on the start index.\n     *\n     * @param {Element} startIndex The start index.\n     * @param {String} word The word data.\n     */\n    focusCellByStartIndex(startIndex, word) {\n        let position = this.calculatePosition(word, startIndex);\n        const rect = this.options.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\n        if (rect) {\n            this.options.wordNumber = word.number;\n            this.toggleHighlight(word, rect.closest('g'));\n            this.updateLetterIndexForCells(word);\n        }\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {Element} target The element.\n     * @param {Number} startIndex The start index.\n     */\n    syncFocusCellAndInput(target, startIndex) {\n        const {wordNumber} = this.options;\n        const gEl = this.options.crosswordEl.querySelector(`g[word*='(${wordNumber})'][letterIndex='${startIndex}']`);\n        target.setSelectionRange(startIndex, startIndex);\n        if (gEl) {\n            this.toggleFocus(gEl);\n        }\n    }\n\n    /**\n     * Toggle the focus cell.\n     *\n     * @param {Element} gEl The word letter.\n     */\n    toggleFocus(gEl) {\n        const focused = this.options.crosswordEl.querySelector('g rect.crossword-cell-focussed');\n        if (focused) {\n            focused.classList.remove('crossword-cell-focussed');\n            focused.classList.add('crossword-cell-highlighted');\n        }\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\n    }\n}\n"],"names":["CrosswordClue","CrosswordQuestion","constructor","options","setUpClue","words","readonly","this","crosswordEl","closest","querySelectorAll","forEach","el","questionId","getAttribute","word","find","o","number","parseInt","inputEl","querySelector","value","makeUnderscore","length","disabled","addEventForClueInput","startSelection","addEventListener","e","startIndex","target","selectionStart","focusCellByStartIndex","focusClue","setStickyClue","dispatchEvent","Event","preventDefault","wordNumber","key","replaceText","handleTypingData","evt","selection","stopPropagation","data","currentSelection","setSelectionRange","split","char","event","isValidKey","maxLength","ARROW_LEFT","ARROW_RIGHT","includes","gEl","toggleHighlight","DELETE","BACKSPACE","syncLettersByText","syncFocusCellAndInput","END","HOME","slice","clipboardData","window","getData","ctrlKey","toLowerCase","Z_KEY","ENTER","selectString","document","getSelection","toString","substring","setData","selectionIndex","gelEl","innerHTML","toUpperCase","bindDataToClueInput","nexEl","position","calculatePosition","rect","x","y","updateLetterIndexForCells","toggleFocus","focused","classList","remove","add"],"mappings":"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"}
>>>>>>> 82d645c (Support to use Chinese)
>>>>>>> 49a6e82 (Support to use Chinese)
