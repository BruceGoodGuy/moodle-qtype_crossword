{"version":3,"file":"crossword_clue.min.js","sources":["../src/crossword_clue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Crossword clue class, handle any action relative to clue.\r\n *\r\n * @module qtype_crossword/crossword_clue\r\n * @copyright 2022 The Open University\r\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\r\n\r\nexport class CrosswordClue extends CrosswordQuestion {\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {Object} options The settings for crossword.\r\n     */\r\n    constructor(options) {\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n     * Set up for clue section.\r\n     */\r\n    setUpClue() {\r\n        let {words, readonly} = this.options;\r\n        const clueEls = this.options.crosswordEl\r\n            .closest('.qtype_crossword-grid-wrapper')\r\n            .querySelectorAll('.contain-clue .wrap-clue');\r\n        clueEls.forEach(el => {\r\n            const questionId = el.dataset.questionid;\r\n            let word = words.find(o => o.number === parseInt(questionId));\r\n            if (word) {\r\n                const inputEl = el.querySelector('input');\r\n                // Retrieve special characters list.\r\n                const ignoreIndexes = this.getIgnoreIndexByAnswerNumber(word.number, false);\r\n                const wordString = this.makeUnderscore(word.length - inputEl.value.length);\r\n                // Add special characters to the answer, then set it to the answer input.\r\n                inputEl.value += this.mapAnswerAndSpecialLetter(wordString, ignoreIndexes[0]);\r\n                if (!readonly) {\r\n                    inputEl.disabled = false;\r\n                }\r\n                // Add event for input.\r\n                this.addEventForClueInput(inputEl, word);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add event to word input element.\r\n     *\r\n     * @param {Element} el The input element.\r\n     * @param {String} word The word data.\r\n     */\r\n    addEventForClueInput(el, word) {\r\n        const {readonly} = this.options;\r\n        let startSelection = 0;\r\n        if (readonly) {\r\n            return;\r\n        }\r\n        el.addEventListener('click', (e) => {\r\n            const {words} = this.options;\r\n            const wordNumber = e.target.closest('.wrap-clue').dataset.questionid;\r\n            const wordObj = words.find(o => o.number === parseInt(wordNumber));\r\n            let startIndex = e.target.selectionStart;\r\n            // Check if the answer fields is clicked.\r\n            const isClicked = startIndex === e.target.selectionEnd;\r\n            const previousIndex = startIndex - 1;\r\n            // Check if the previous character contains hyphen or space.\r\n            const isContainSpecialCharacter = ['-', ' '].includes(e.target.value.charAt(previousIndex));\r\n            if (!isContainSpecialCharacter && isClicked) {\r\n                startIndex = (previousIndex < 0) ? 0 : previousIndex;\r\n                e.target.setSelectionRange(startIndex, startIndex);\r\n            }\r\n            // Based on the selected letter index on the answer index,\r\n            // we will find the corresponding crossword cell index.\r\n            startIndex = this.findCellIndexFromAnswerIndex(wordObj, startIndex);\r\n            this.focusCellByStartIndex(startIndex, word);\r\n            this.focusClue();\r\n            this.setStickyClue();\r\n        });\r\n\r\n        el.addEventListener('focus', (e) => {\r\n            e.target.dispatchEvent(new Event('click'));\r\n        });\r\n\r\n        el.addEventListener('beforeinput', (e) => {\r\n            if (e.inputType === 'insertText' && e.data) {\r\n                this.handleInsertedCharacterToElement(e, e.data);\r\n            }\r\n        });\r\n\r\n        el.addEventListener('input', (e) => {\r\n            // Handling the event when the user selects the backspace or delete button.\r\n            if (e.inputType === 'deleteContentBackward' ||\r\n                    e.inputType === 'deleteContentForward') {\r\n                this.handleAndSyncDeletedStringToElement(e.target, e.target.value);\r\n            }\r\n        });\r\n\r\n        el.addEventListener('keypress', (e) => {\r\n            e.preventDefault();\r\n            // On mobile devices, the Backspace key may trigger the keypress event when the user uses Input Method Editor.\r\n            // Therefore, we need to prevent this behavior.\r\n            if (e.key === this.BACKSPACE) {\r\n                return;\r\n            }\r\n            this.handleInsertedCharacterToElement(e, e.key);\r\n        });\r\n\r\n        el.addEventListener('compositionstart', (evt) => {\r\n            const selection = evt.target.selectionStart;\r\n            startSelection = selection;\r\n        });\r\n\r\n        el.addEventListener('compositionend', (evt) => {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            const {wordNumber} = this.options;\r\n            const selection = evt.target.selectionStart;\r\n            let key = evt.data.normalize('NFKC');\r\n            evt.target.setSelectionRange(selection, selection);\r\n            this.insertCharacters(evt, key, wordNumber, word, startSelection);\r\n        });\r\n\r\n        el.addEventListener('keyup', (event) => {\r\n            event.preventDefault();\r\n            const {words, wordNumber} = this.options;\r\n            const {key, target} = event;\r\n            let {value} = target;\r\n            let isValidKey = false;\r\n            let maxLength = parseInt(target.getAttribute('maxlength'));\r\n            if ([this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\r\n                isValidKey = true;\r\n                const word = words.find(o => o.number === parseInt(wordNumber));\r\n                // Based on the selected letter index of the answer input,\r\n                // we will find the cell with the corresponding letter index attribute.\r\n                const startIndex = this.findCellIndexFromAnswerIndex(word, target.selectionStart, false);\r\n                const gEl = this.options.crosswordEl\r\n                    .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\r\n                if (gEl) {\r\n                    this.toggleHighlight(word, gEl);\r\n                }\r\n            }\r\n\r\n            if (key === this.END || key === this.HOME || key === this.ARROW_UP || key === this.ARROW_DOWN) {\r\n                isValidKey = true;\r\n                let startIndex = 0;\r\n                const word = words.find(o => o.number === parseInt(wordNumber));\r\n                if (!word) {\r\n                    return;\r\n                }\r\n                if (key === this.END || key === this.ARROW_DOWN) {\r\n                    startIndex = word.length - 1;\r\n                }\r\n                this.syncFocusCellAndInput(target, startIndex);\r\n            }\r\n\r\n            if (!isValidKey && startSelection >= maxLength) {\r\n                event.target.value = value.slice(0, maxLength);\r\n            }\r\n        });\r\n\r\n        el.addEventListener('paste', (event) => {\r\n            event.preventDefault();\r\n            const {words, wordNumber} = this.options;\r\n            const word = words.find(o => o.number === parseInt(wordNumber));\r\n            let selection = event.target.selectionStart;\r\n            let value = (event.clipboardData || window.clipboardData).getData('text');\r\n            let ignoreIndexes = this.getIgnoreIndexByAnswerNumber(word.number);\r\n            // Remove invalid characters, normarlize NFKC.\r\n            value = this.replaceText(value).normalize('NFKC');\r\n            if (value === '') {\r\n                return;\r\n            }\r\n            let letterIndex = 1;\r\n            value.split('').every(char => {\r\n                // Stop function If the character overflows.\r\n                if (letterIndex > word.length - ignoreIndexes.length) {\r\n                    return false;\r\n                }\r\n                const result = this.handleTypingData(event, wordNumber, word, selection, char);\r\n                letterIndex++;\r\n                // Find the valid index.\r\n                if (result) {\r\n                    for (let index = selection + 1; index < word.length; index++) {\r\n                        if (!ignoreIndexes.includes(index)) {\r\n                            selection = index;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            });\r\n        });\r\n\r\n        el.addEventListener('keydown', (e) => {\r\n            if (e.ctrlKey && e.key.toLowerCase() === this.Z_KEY) {\r\n                e.preventDefault();\r\n            }\r\n            if (e.key === this.ENTER) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n\r\n        el.addEventListener('cut', (event) => {\r\n            const selectString = document.getSelection().toString();\r\n            const startIndex = event.target.selectionStart;\r\n            let {value} = event.target;\r\n            value = value.substring(0, startIndex) +\r\n                value.substring(startIndex + selectString.length) +\r\n                this.makeUnderscore(selectString.length);\r\n            event.target.value = value;\r\n            event.clipboardData.setData('text/plain', selectString);\r\n            event.preventDefault();\r\n            event.target.setSelectionRange(startIndex, startIndex);\r\n            // In case the user cuts off the entire answer, we need to update the crossword grid.\r\n            this.syncLettersByText(value, false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handle typing data.\r\n     *\r\n     * @param {Object} evt Event data.\r\n     * @param {Number} wordNumber The word number.\r\n     * @param {Object} word The word object.\r\n     * @param {Number} selectionIndex The position of cursor selection.\r\n     * @param {String} char The character.\r\n     *\r\n     * @return {Boolean} True if the data is valid.\r\n     */\r\n    handleTypingData(evt, wordNumber, word, selectionIndex, char) {\r\n        const [count, gEl] = this.findTheClosestCell(wordNumber, word, selectionIndex);\r\n        if (this.replaceText(char) === '') {\r\n            return false;\r\n        }\r\n        if (gEl) {\r\n            gEl.querySelector('text.crossword-cell-text').innerHTML = char.toUpperCase();\r\n            this.bindDataToClueInput(gEl, char.toUpperCase());\r\n        }\r\n\r\n        // Go to next letter.\r\n        const [letterIndex, nexEl] = this.findTheClosestCell(wordNumber, word, count + 1);\r\n        if (nexEl) {\r\n            this.toggleHighlight(word, nexEl);\r\n            evt.target.setSelectionRange(letterIndex, letterIndex);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Focus cell base on the start index.\r\n     *\r\n     * @param {Element} startIndex The start index.\r\n     * @param {String} word The word data.\r\n     */\r\n    focusCellByStartIndex(startIndex, word) {\r\n        let position = this.calculatePosition(word, startIndex);\r\n        const rect = this.options.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\r\n        if (rect) {\r\n            this.options.wordNumber = word.number;\r\n            this.toggleHighlight(word, rect.closest('g'));\r\n            this.updateLetterIndexForCells(word);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Focus crossword cell from the start index.\r\n     *\r\n     * @param {Element} target The element.\r\n     * @param {Number} startIndex The start index.\r\n     */\r\n    syncFocusCellAndInput(target, startIndex) {\r\n        const {wordNumber} = this.options;\r\n        const gEl = this.options.crosswordEl.querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\r\n        target.setSelectionRange(startIndex, startIndex);\r\n        if (gEl) {\r\n            this.toggleFocus(gEl);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Toggle the focus cell.\r\n     *\r\n     * @param {Element} gEl The word letter.\r\n     */\r\n    toggleFocus(gEl) {\r\n        const focused = this.options.crosswordEl.querySelector('g rect.crossword-cell-focussed');\r\n        if (focused) {\r\n            focused.classList.remove('crossword-cell-focussed');\r\n            focused.classList.add('crossword-cell-highlighted');\r\n        }\r\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\r\n    }\r\n\r\n    /**\r\n     *\r\n     * Add underscore to deleted string and sync it to crossword clue input.\r\n     *\r\n     * @param {Element} target The element target\r\n     * @param {String} value the string input after we deleted single or multiples character.\r\n     */\r\n    handleAndSyncDeletedStringToElement(target, value) {\r\n        const {words, wordNumber} = this.options;\r\n        const word = words.find(o => o.number === parseInt(wordNumber));\r\n        if (!word) {\r\n            return;\r\n        }\r\n        let startIndex = target.selectionStart;\r\n        let selectionLength = word.length - value.length;\r\n        // When the user enters characters using an Input Method Editor, sometimes they may exceed the maximum length allowed.\r\n        // We need to reset it to prevent obtaining a negative number.\r\n        if (selectionLength < 0) {\r\n            selectionLength = 0;\r\n        }\r\n        const underScore = this.makeUnderscore(selectionLength);\r\n        // Insert underscore to deleted string.\r\n        // We need to ensure that the value does not exceed the maximum allowed length.\r\n        target.value = [value.slice(0, startIndex), underScore, value.slice(startIndex)].join('').slice(0, word.length);\r\n        // In case the user deletes the entire answer we need to update the crossword grid.\r\n        this.syncLettersByText(target.value, false);\r\n        this.syncFocusCellAndInput(target, startIndex);\r\n    }\r\n\r\n    /**\r\n     * Insert the character to clue input.\r\n     *\r\n     * @param {Object} event Event data.\r\n     * @param {String} value the character we are inserted to the clue input.\r\n     */\r\n    handleInsertedCharacterToElement(event, value) {\r\n        const {words, wordNumber} = this.options;\r\n        const word = words.find(o => o.number === parseInt(wordNumber));\r\n        let startIndex = event.target.selectionStart;\r\n        value = this.replaceText(value).normalize('NFKC');\r\n        if (value === '') {\r\n            return;\r\n        }\r\n        event.target.setSelectionRange(startIndex, startIndex);\r\n        this.insertCharacters(event, value, wordNumber, word, startIndex);\r\n    }\r\n\r\n    /**\r\n     * When the user enters characters using an Input Method Editor (IME),\r\n     * the input value can consist of multiple characters instead of just one. Therefore, we need to loop through them and\r\n     * insert them into the answer input.\r\n     *\r\n     * @param {Object} event Event data.\r\n     * @param {String} value The characters we are inserted to the clue input.\r\n     * @param {Number} wordNumber The word number.\r\n     * @param {Object} word The word object.\r\n     * @param {Number} currentSelection The position of cursor.\r\n     */\r\n    insertCharacters(event, value, wordNumber, word, currentSelection) {\r\n        // Retrieve the special character index of word.\r\n        // e.g: Answer is: A-B-C, so the list special character index is: [1,3].\r\n        const ignoreIndexes = this.getIgnoreIndexByAnswerNumber(wordNumber);\r\n        const chars = value.split('');\r\n        // If the current selection index is greater than the word length or\r\n        // if we have already handled all the characters, we need to stop the loop.\r\n        while (currentSelection < word.length && chars.length !== 0) {\r\n            // Skip handling special characters.\r\n            if (!ignoreIndexes.includes(currentSelection)) {\r\n                // Handle each character.\r\n                this.handleTypingData(event, wordNumber, word, currentSelection, chars.shift());\r\n            }\r\n            // We have to increase the selection index until we encounter a valid letter (excluding special characters).\r\n            currentSelection++;\r\n        }\r\n    }\r\n}\r\n"],"names":["CrosswordClue","CrosswordQuestion","constructor","options","setUpClue","words","readonly","this","crosswordEl","closest","querySelectorAll","forEach","el","questionId","dataset","questionid","word","find","o","number","parseInt","inputEl","querySelector","ignoreIndexes","getIgnoreIndexByAnswerNumber","wordString","makeUnderscore","length","value","mapAnswerAndSpecialLetter","disabled","addEventForClueInput","startSelection","addEventListener","e","wordNumber","target","wordObj","startIndex","selectionStart","isClicked","selectionEnd","previousIndex","includes","charAt","setSelectionRange","findCellIndexFromAnswerIndex","focusCellByStartIndex","focusClue","setStickyClue","dispatchEvent","Event","inputType","data","handleInsertedCharacterToElement","handleAndSyncDeletedStringToElement","preventDefault","key","BACKSPACE","evt","selection","stopPropagation","normalize","insertCharacters","event","isValidKey","maxLength","getAttribute","ARROW_LEFT","ARROW_RIGHT","gEl","toggleHighlight","END","HOME","ARROW_UP","ARROW_DOWN","syncFocusCellAndInput","slice","clipboardData","window","getData","replaceText","letterIndex","split","every","char","result","handleTypingData","index","ctrlKey","toLowerCase","Z_KEY","ENTER","selectString","document","getSelection","toString","substring","setData","syncLettersByText","selectionIndex","count","findTheClosestCell","innerHTML","toUpperCase","bindDataToClueInput","nexEl","position","calculatePosition","rect","x","y","updateLetterIndexForCells","toggleFocus","focused","classList","remove","add","selectionLength","underScore","join","currentSelection","chars","shift"],"mappings":"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"}