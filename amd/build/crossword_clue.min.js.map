{"version":3,"file":"crossword_clue.min.js","sources":["../src/crossword_clue.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Crossword clue class, handle any action relative to clue.\n *\n * @module qtype_crossword/crossword_clue\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\n\nexport class CrosswordClue extends CrosswordQuestion {\n\n    /**\n     * Constructor.\n     *\n     * @param {Object} options The settings for crossword.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Set up for clue section.\n     */\n    setUpClue() {\n        let {words, readonly} = this.options;\n        const clueEls = this.options.crosswordEl\n            .closest('.qtype_crossword-grid-wrapper')\n            .querySelectorAll('.contain-clue .wrap-clue');\n        clueEls.forEach(el => {\n            const questionId = el.dataset.questionid;\n            let word = words.find(o => o.number === parseInt(questionId));\n            if (word) {\n                const inputEl = el.querySelector('input');\n                inputEl.value += this.makeUnderscore(word.length - inputEl.value.length);\n                if (!readonly) {\n                    inputEl.disabled = false;\n                }\n                // Add event for input.\n                this.addEventForClueInput(inputEl, word);\n            }\n        });\n    }\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} el The input element.\n     * @param {String} word The word data.\n     */\n    addEventForClueInput(el, word) {\n        const {readonly} = this.options;\n        let startSelection = 0;\n        if (readonly) {\n            return;\n        }\n        el.addEventListener('click', (e) => {\n            let startIndex = e.target.selectionStart;\n            if (startIndex >= word.length) {\n                startIndex = word.length - 1;\n            }\n            this.focusCellByStartIndex(startIndex, word);\n            this.focusClue();\n            this.setStickyClue();\n        });\n\n        el.addEventListener('focus', (e) => {\n            e.target.dispatchEvent(new Event('click'));\n        });\n\n        el.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let {key, target} = e;\n            let startIndex = target.selectionStart;\n            key = this.replaceText(key).normalize('NFKC');\n            if (key === '') {\n                return;\n            }\n            this.handleTypingData(e, wordNumber, word, startIndex, key);\n        });\n\n        el.addEventListener('compositionstart', (evt) => {\n            const selection = evt.target.selectionStart;\n            startSelection = selection;\n        });\n\n        el.addEventListener('compositionend', (evt) => {\n            evt.preventDefault();\n            evt.stopPropagation();\n            const {wordNumber} = this.options;\n            const selection = evt.target.selectionStart;\n            let key = evt.data.normalize('NFKC');\n            let currentSelection = startSelection;\n            evt.target.setSelectionRange(selection, selection);\n            key.split('').forEach(char => {\n                const result = this.handleTypingData(evt, wordNumber, word, currentSelection, char);\n                if (result) {\n                    currentSelection++;\n                }\n            });\n        });\n\n        el.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const {key, target} = event;\n            let {value} = target;\n            let isValidKey = false;\n            let maxLength = parseInt(target.getAttribute('maxlength'));\n            if ([this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\n                isValidKey = true;\n                const startIndex = target.selectionStart;\n                const gEl = this.options.crosswordEl\n                        .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n                if (gEl) {\n                    this.toggleHighlight(word, gEl);\n                }\n            }\n            if (key === this.DELETE || key === this.BACKSPACE) {\n                isValidKey = true;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                let startIndex = target.selectionStart;\n                if (!word) {\n                    return;\n                }\n                const selectionLength = word.length - value.length;\n                const underScore = this.makeUnderscore(selectionLength);\n                value = [value.slice(0, startIndex), underScore, value.slice(startIndex)].join('');\n                target.value = value;\n                // In case the user deletes the entire answer we need to update the crossword grid.\n                this.syncLettersByText(value, false);\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (key === this.END || key === this.HOME) {\n                isValidKey = true;\n                let startIndex = 0;\n                const word = words.find(o => o.number === parseInt(wordNumber));\n                if (!word) {\n                    return;\n                }\n                if (key === this.END) {\n                    startIndex = word.length - 1;\n                }\n                this.syncFocusCellAndInput(target, startIndex);\n            }\n\n            if (!isValidKey && startSelection >= maxLength) {\n                event.target.value = value.slice(0, maxLength);\n            }\n        });\n\n        el.addEventListener('paste', (event) => {\n            event.preventDefault();\n            const {words, wordNumber} = this.options;\n            const word = words.find(o => o.number === parseInt(wordNumber));\n            let selection = event.target.selectionStart;\n            let value = (event.clipboardData || window.clipboardData).getData('text');\n            value = this.replaceText(value).normalize('NFKC');\n            if (value === \"\") {\n                return;\n            }\n            value.split('').forEach(char => {\n                const result = this.handleTypingData(event, wordNumber, word, selection, char);\n                if (result) {\n                    selection++;\n                }\n            });\n        });\n\n        el.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key.toLowerCase() === this.Z_KEY) {\n                e.preventDefault();\n            }\n            if (e.key === this.ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        el.addEventListener('cut', (event) => {\n            const selectString = document.getSelection().toString();\n            const startIndex = event.target.selectionStart;\n            let {value} = event.target;\n            value = value.substring(0, startIndex) +\n                value.substring(startIndex + selectString.length) +\n                this.makeUnderscore(selectString.length);\n            event.target.value = value;\n            event.clipboardData.setData('text/plain', selectString);\n            event.preventDefault();\n            event.target.setSelectionRange(startIndex, startIndex);\n            // In case the user cuts off the entire answer, we need to update the crossword grid.\n            this.syncLettersByText(value, false);\n        });\n    }\n\n    /**\n     * Handle typing data.\n     *\n     * @param {Object} evt Event data.\n     * @param {Number} wordNumber The word number.\n     * @param {Object} word The word object.\n     * @param {Number} selectionIndex The position of cursor selection.\n     * @param {String} char The character.\n     *\n     * @return {Boolean} True if the data is valid.\n     */\n    handleTypingData(evt, wordNumber, word, selectionIndex, char) {\n        const gelEl = this.options.crosswordEl\n            .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${selectionIndex}']`);\n        if (this.replaceText(char) === '') {\n            return false;\n        }\n        if (gelEl) {\n            gelEl.querySelector('text.crossword-cell-text').innerHTML = char.toUpperCase();\n            this.bindDataToClueInput(gelEl, char.toUpperCase());\n        }\n        selectionIndex++;\n\n        // Go to next letter.\n        const nexEl = this.options.crosswordEl\n            .querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${selectionIndex}']`);\n        if (nexEl) {\n            this.toggleHighlight(word, nexEl);\n            evt.target.setSelectionRange(selectionIndex, selectionIndex);\n        }\n        return true;\n    }\n\n    /**\n     * Focus cell base on the start index.\n     *\n     * @param {Element} startIndex The start index.\n     * @param {String} word The word data.\n     */\n    focusCellByStartIndex(startIndex, word) {\n        let position = this.calculatePosition(word, startIndex);\n        const rect = this.options.crosswordEl.querySelector(`g rect[x='${position.x}'][y='${position.y}']`);\n        if (rect) {\n            this.options.wordNumber = word.number;\n            this.toggleHighlight(word, rect.closest('g'));\n            this.updateLetterIndexForCells(word);\n        }\n    }\n\n    /**\n     * Focus crossword cell from the start index.\n     *\n     * @param {Element} target The element.\n     * @param {Number} startIndex The start index.\n     */\n    syncFocusCellAndInput(target, startIndex) {\n        const {wordNumber} = this.options;\n        const gEl = this.options.crosswordEl.querySelector(`g[data-word*='(${wordNumber})'][data-letterindex='${startIndex}']`);\n        target.setSelectionRange(startIndex, startIndex);\n        if (gEl) {\n            this.toggleFocus(gEl);\n        }\n    }\n\n    /**\n     * Toggle the focus cell.\n     *\n     * @param {Element} gEl The word letter.\n     */\n    toggleFocus(gEl) {\n        const focused = this.options.crosswordEl.querySelector('g rect.crossword-cell-focussed');\n        if (focused) {\n            focused.classList.remove('crossword-cell-focussed');\n            focused.classList.add('crossword-cell-highlighted');\n        }\n        gEl.querySelector('rect').classList.add('crossword-cell-focussed');\n    }\n}\n"],"names":["CrosswordClue","CrosswordQuestion","constructor","options","setUpClue","words","readonly","this","crosswordEl","closest","querySelectorAll","forEach","el","questionId","dataset","questionid","word","find","o","number","parseInt","inputEl","querySelector","value","makeUnderscore","length","disabled","addEventForClueInput","startSelection","addEventListener","e","startIndex","target","selectionStart","focusCellByStartIndex","focusClue","setStickyClue","dispatchEvent","Event","preventDefault","wordNumber","key","replaceText","normalize","handleTypingData","evt","selection","stopPropagation","data","currentSelection","setSelectionRange","split","char","event","isValidKey","maxLength","getAttribute","ARROW_LEFT","ARROW_RIGHT","includes","gEl","toggleHighlight","DELETE","BACKSPACE","selectionLength","underScore","slice","join","syncLettersByText","syncFocusCellAndInput","END","HOME","clipboardData","window","getData","ctrlKey","toLowerCase","Z_KEY","ENTER","selectString","document","getSelection","toString","substring","setData","selectionIndex","gelEl","innerHTML","toUpperCase","bindDataToClueInput","nexEl","position","calculatePosition","rect","x","y","updateLetterIndexForCells","toggleFocus","focused","classList","remove","add"],"mappings":"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"}