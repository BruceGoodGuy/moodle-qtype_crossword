{"version":3,"file":"crossword_grid.min.js","sources":["../src/crossword_grid.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * CrosswordGrid class handle every function relative to grid.\n *\n * @module qtype_crossword/crossword_grid\n * @copyright 2022 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {CrosswordQuestion} from 'qtype_crossword/crossword_question';\nimport {CrosswordClue} from './crossword_clue';\n\nexport class CrosswordGrid extends CrosswordQuestion {\n\n    /**\n     * Constructor.\n     *\n     * @param {Object} options The settings for crossword.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /**\n     * Build the background table.\n     */\n    buildBackgroundTable() {\n        let {colsNum, rowsNum, previewSetting} = this.options;\n        let style = previewSetting;\n\n        // Create table element.\n        const tableEl = document.createElement('table');\n\n        // Preview mode will add one more columns and row to add the coordinate helper.\n        colsNum++;\n        rowsNum++;\n\n        tableEl.className = 'crossword-grid';\n        // Set the background color.\n        tableEl.style.backgroundColor = style.backgroundColor;\n\n        for (let i = 0; i < rowsNum; i++) {\n            const rowEl = document.createElement('tr');\n            rowEl.className = 'grid-row';\n            for (let j = 0; j < colsNum; j++) {\n                // Create square.\n                let squareEl = document.createElement('td');\n                squareEl.className = 'grid-square';\n                squareEl.style.borderColor = style.borderColor;\n                squareEl.style.color = style.color;\n\n                if (i === 0 && j === 0) {\n                    squareEl.classList.add('cell-white');\n                }\n\n                // Adding alphanumeric.\n                if (i === 0 && j !== 0) {\n                    squareEl.innerText = this.getColumnLabel(j - 1);\n                    squareEl.classList.add('square-indicate-horizontal');\n                }\n                if (i !== 0 && j === 0) {\n                    squareEl.innerText = i;\n                    squareEl.classList.add('square-indicate-vertical');\n                }\n                rowEl.append(squareEl);\n            }\n            tableEl.append(rowEl);\n        }\n        this.tableEl = tableEl;\n        this.options.crosswordEl.innerHTML = tableEl.outerHTML;\n    }\n\n    /**\n     * Add each cell into table.\n     */\n    addCell() {\n        let {words, previewSetting, rowsNum, colsNum} = this.options;\n        // Don't draw empty words.\n        if (words.length === 0) {\n            return;\n        }\n        for (let i = 0; i < words.length; i++) {\n            let row = words[i].startrow + 1;\n            let column = words[i].startcolumn + 1;\n            let answerLength = words[i].answer.length;\n            let realLength = answerLength + words[i].startcolumn;\n            let allowLength = parseInt(colsNum);\n            let invalidWord = words[i].clue.trim() === '';\n            // Add more columns and row for preview.\n            row++;\n            column++;\n\n            if (!invalidWord) {\n                invalidWord = this.isInvalidAnswer(words[i].answer);\n            }\n\n            if (words[i].orientation) {\n                realLength = answerLength + words[i].startrow;\n                allowLength = parseInt(rowsNum);\n            }\n\n            for (let j = 0; j < words[i].answer.length; j++) {\n                const number = i + 1;\n                const squareEl = document.querySelector('.grid-row:nth-child(' + row + ') .grid-square:nth-child(' + column + ')');\n                if (!squareEl) {\n                    continue;\n                }\n\n                // Paint white background.\n                squareEl.classList.add('background-white');\n\n                if (j === 0) {\n                    const labelEl = squareEl.querySelector('.word-label');\n                    if (!labelEl) {\n                        let spanEl = document.createElement('span');\n                        spanEl.className = 'word-label';\n                        spanEl.innerText = words[i]?.no ?? number;\n                        squareEl.append(spanEl);\n                    } else {\n                        let label = labelEl.innerText;\n                        label += ', ' + words[i]?.no ?? number;\n                        labelEl.innerText = label;\n                    }\n                }\n                const letter = words[i].answer[j].toUpperCase().trim() ?? '';\n                const contentEl = squareEl.querySelector('span.word-content');\n                if (!contentEl) {\n                    let spanEl = document.createElement('span');\n                    spanEl.className = 'word-content';\n                    spanEl.innerText = letter;\n                    squareEl.append(spanEl);\n                } else {\n                    let text = '';\n                    const innerText = contentEl.innerText;\n                    if (innerText.search(letter) < 0) {\n                        text = innerText + ' | ' + letter;\n                        squareEl.style.backgroundColor = previewSetting.conflictColor;\n                        contentEl.innerText = text;\n                    }\n                }\n\n                if (invalidWord || realLength > allowLength) {\n                    squareEl.style.backgroundColor = previewSetting.conflictColor;\n                }\n\n                if (words[i].orientation) {\n                    row++;\n                } else {\n                    column++;\n                }\n            }\n        }\n    }\n\n    /**\n     * Show the crossword preview.\n     */\n    previewCrossword() {\n        // Build the background table.\n        this.buildBackgroundTable();\n        // Fill the cell into the table.\n        this.addCell();\n    }\n\n    /**\n     * Build crossword for attempt.\n     */\n    buildCrossword() {\n        // Set up for clue input: maxlength, aria-label.\n        const crosswordClue = new CrosswordClue(this.options);\n        crosswordClue.setUpClue();\n        // Draw crossword by SVG to support high contrast mode.\n        this.drawCrosswordSVG();\n        // Sync data between clue section and crossword cell.\n        this.syncDataForInit();\n        // Add event when resized screen.\n        this.addEventResizeScreen();\n    }\n\n    /**\n     * Draw crossword by SVG element.\n     */\n    drawCrosswordSVG() {\n        const options = this.options;\n        const crosswordEl = this.options.crosswordEl;\n        let className = 'crossword-grid';\n        let cssText = `width: ${options.width}px;`;\n\n        if (!crosswordEl) {\n            return;\n        }\n\n        // Create background.\n        let svg = this.createElementNSFrom(\n            'svg',\n            {\n                'class': className,\n                viewBox: `0 0 ${options.width} ${options.height}`\n            }\n        );\n\n        // Create black background.\n        const rectEl = this.createElementNSFrom(\n            'rect',\n            {\n                'class': 'crossword-grid-background',\n                x: 0,\n                y: 0,\n                width: options.width,\n                height: options.height\n            }\n        );\n        svg.append(rectEl);\n\n        // Create svg body.\n        svg = this.createCrosswordBody(svg);\n\n        // Set the crossword with and height by CSS to keep original size.\n        svg.style.cssText = cssText;\n\n        // Create an input, by default, it will be hidden.\n        const inputContainEl = this.createElementFrom(\n            'div',\n            {\n                'class': 'crossword-hidden-input-wrapper'\n            }\n        );\n        const inputEl = this.createElementFrom(\n            'input',\n            {\n                type: 'text',\n                'class': 'crossword-hidden-input',\n                maxlength: 1,\n                autocomplete: 'off',\n                spellcheck: false,\n                autocorrect: 'off'\n            }\n        );\n        // Add event for word input.\n        this.addEventForWordInput(inputEl);\n        inputContainEl.append(inputEl);\n        crosswordEl.append(svg, inputContainEl);\n    }\n\n    /**\n     * Creates an element with the specified namespace URI and qualified name.\n     *\n     * @param {String} type\n     * @param {Object} attributes\n     *\n     * @return {Element} The return element.\n     */\n    createElementNSFrom(type, attributes = {}) {\n        const element = document.createElementNS('http://www.w3.org/2000/svg', type);\n        for (let key in attributes) {\n            element.setAttributeNS(null, key, attributes[key]);\n        }\n        return element;\n    }\n\n    /**\n     * Create element with attributes.\n     *\n     * @param {String} type\n     * @param {Object} attributes The attribute list.\n     * @return {Element} The return element.\n     */\n    createElementFrom(type, attributes = {}) {\n        const element = document.createElement(type);\n        for (let key in attributes) {\n            element.setAttribute(key, attributes[key]);\n        }\n        return element;\n    }\n\n    /**\n     * Calculate position and add cell into the crossword.\n     *\n     * @param {Element} svg  The svg element.\n     * @return {Element} The svg element.\n     */\n    createCrosswordBody(svg) {\n        const {words, cellWidth, cellHeight, isSmall} = this.options;\n        let count = 0;\n        for (let i in words) {\n            const word = words[i];\n            for (let key = 0; key < word.length; key++) {\n                // Prepare attributes for g.\n                const customAttribute = {\n                    'data-startrow': word.startRow,\n                    'data-startcolumn': word.startColumn,\n                    'data-letterindex': key,\n                    'data-word': '(' + word.number + ')',\n                    'data-code': 'A' + count\n                };\n                // Calculate the letter position.\n                const position = this.calculatePosition(word, parseInt(key));\n                // Create rect element with these position.\n                const rectEl = this.createElementNSFrom(\n                    'rect',\n                    {\n                        ...position,\n                        width: cellWidth,\n                        height: cellHeight,\n                        'class': 'crossword-cell'\n                    }\n                );\n                // Create g element with the attributes.\n                let g = this.createElementNSFrom('g', {...customAttribute});\n                // Get exist ting rect element.\n                const existingRectElement = svg.querySelector(`rect.crossword-cell[x='${position.x}'][y='${position.y}']`);\n                // Create text element to hold the letter.\n                let className = 'crossword-cell-text';\n                if (isSmall) {\n                    className += ' font-size-small';\n                }\n                const textEl = this.createElementNSFrom(\n                    'text',\n                    {\n                        x: position.x + cellWidth / 2,\n                        y: position.y + cellHeight / 2 + 7,\n                        'class': className,\n                        'text-anchor': 'middle',\n                    }\n                );\n                // Check if cell is not drawn.\n                if (!existingRectElement) {\n                    // Create cell.\n                    g.append(rectEl);\n                    // If it's the first cell of word.\n                    // Draw word number.\n                    if (parseInt(key) === 0) {\n                        g = this.appendCellNumber(g, position, word.number);\n                    }\n                    g.append(textEl);\n                    // Add event for cell.\n                    this.addEventForG(g);\n                    count++;\n                    svg.append(g);\n                } else {\n                    let existingNumberElement = existingRectElement.closest('g').querySelector('text.crossword-cell-number');\n                    let currentWord = existingRectElement.closest('g').dataset.word;\n                    let g;\n                    existingRectElement.closest('g').dataset.word = currentWord + '(' + word.number + ')';\n                    if (parseInt(key) !== 0) {\n                        continue;\n                    }\n                    if (existingNumberElement) {\n                        // Append word number, if this cell is existed another one.\n                        existingNumberElement.append(', ' + word.number);\n                    } else {\n                        // Create new word number.\n                        g = existingRectElement.closest('g');\n                        this.appendCellNumber(g, position, word.number);\n                    }\n                }\n            }\n        }\n        return svg;\n    }\n\n    /**\n     * Create word number for the cell.\n     *\n     * @param {Element} g The g element.\n     * @param {Object} position The coordinates of letter.\n     * @param {Number} wordNumber The word number.\n     *\n     * @return {Element} The g element.\n     */\n    appendCellNumber(g, position, wordNumber) {\n        // Update position for word number.\n        const x = position.x + 2;\n        const y = position.y + 13;\n        let textNumber = this.createElementNSFrom(\n            'text',\n            {\n                x,\n                y,\n                'class': 'crossword-cell-number'\n            }\n        );\n        textNumber.append(wordNumber);\n        g.append(textNumber);\n        return g;\n    }\n\n    /**\n     * Add event to the g element.\n     *\n     * @param {Element} g The g element.\n     */\n    addEventForG(g) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        // Handle event click.\n        g.addEventListener('click', (e) => {\n            const inputWrapperEl = this.options.crosswordEl.querySelector('.crossword-hidden-input-wrapper');\n            const inputEl = inputWrapperEl.querySelector('input');\n            let element = e.target;\n            // Make sure select g.\n            if (element.tagName !== 'g') {\n                element = element.closest('g');\n            }\n            this.handleWordSelect(element);\n            inputEl.dataset.code = element.dataset.code;\n            inputEl.value = '';\n            this.updatePositionForCellInput(element.querySelector('rect'));\n            inputEl.focus();\n        });\n    }\n\n    /**\n     * Handle action when click on cell.\n     *\n     * @param {Element} gEl The g element.\n     */\n    handleWordSelect(gEl) {\n        const currentCell = gEl.dataset.code;\n        let words = gEl.dataset.word;\n        let focus = -1;\n        let {coordinates, wordNumber} = this.options;\n\n        // Detect word number.\n        words = words.match(/(\\d+)/g);\n\n        // Detect word number based on event click.\n        // The focus variable is the new word number.\n        if (currentCell === coordinates) {\n            const indexCell = words.indexOf(wordNumber);\n            if (words[indexCell + 1] !== undefined) {\n                focus = words[indexCell + 1];\n            } else {\n                focus = words[0];\n            }\n        } else {\n            // Update new coordinates.\n            this.options.coordinates = currentCell;\n            if (wordNumber < 0) {\n                this.options.wordNumber = words[0];\n            }\n            if (words.includes(wordNumber)) {\n                focus = wordNumber;\n            } else {\n                focus = words[0];\n            }\n        }\n        // Update word number.\n        this.options.wordNumber = focus;\n        const word = this.options.words.find(o => o.number === parseInt(focus));\n        if (!word) {\n            return;\n        }\n        // Sorting and Updating letter index.\n        this.updateLetterIndexForCells(word);\n        // Toggle highlight and focused.\n        this.toggleHighlight(word, gEl);\n        // Focus the clue.\n        this.focusClue();\n        // Update sticky clue for mobile version.\n        this.setStickyClue();\n    }\n\n    /**\n     * Set size and position for cell input.\n     *\n     * @param {Element} [rectEl=null] Rect element.\n     */\n    updatePositionForCellInput(rectEl = null) {\n        if (rectEl === null) {\n            rectEl = this.options.crosswordEl.querySelector('rect.crossword-cell-focussed');\n        }\n        if (rectEl) {\n            const rect = rectEl.getBoundingClientRect();\n            const parentEl = this.options.crosswordEl.querySelector('.crossword-grid').getBoundingClientRect();\n            const inputWrapperEl = this.options.crosswordEl.querySelector('.crossword-hidden-input-wrapper');\n            let top = rect.top - parentEl.top;\n            if (top < 1) {\n                top = 1;\n            }\n            inputWrapperEl.style.cssText = `\n                display: block; top: ${top}px;\n                left: ${rect.left - parentEl.left}px;\n                width: ${rect.width}px;\n                height: ${rect.height}px\n            `;\n        }\n    }\n\n    /**\n     * Add event to word input element.\n     *\n     * @param {Element} inputEl The input element.\n     */\n    addEventForWordInput(inputEl) {\n        const {readonly} = this.options;\n        if (readonly) {\n            return;\n        }\n        inputEl.addEventListener('keypress', (e) => {\n            e.preventDefault();\n            const {wordNumber} = this.options;\n            const inputEl = e.target;\n            const code = inputEl.dataset.code;\n            let value = e.key.toUpperCase();\n            if (this.replaceText(e.key) === '') {\n                return false;\n            }\n            // Filter value.\n            if (code) {\n                const textEl = this.options.crosswordEl.querySelector(`g[data-code='${code}'] text.crossword-cell-text`);\n                if (!textEl) {\n                    return false;\n                }\n                textEl.innerHTML = value;\n                const letterIndex = parseInt(textEl.closest('g').dataset.letterindex);\n                const nextCellEl = this.options.crosswordEl.querySelector(\n                    `g[data-word*='(${wordNumber})'][data-letterindex='${letterIndex + 1}']`\n                );\n                // Interact with clue.\n                this.bindDataToClueInput(textEl.closest('g'), e.key);\n                if (nextCellEl) {\n                    nextCellEl.dispatchEvent(new Event('click'));\n                }\n            }\n            return true;\n        });\n\n        inputEl.addEventListener('compositionend', (evt) => {\n            evt.preventDefault();\n            evt.stopPropagation();\n            const {wordNumber} = this.options;\n            let key = evt.data.toUpperCase();\n            const code = evt.target.dataset.code;\n            if (this.replaceText(key) === '') {\n                return false;\n            }\n            if (code) {\n                let chars = key.split('');\n                const gEl = this.options.crosswordEl.querySelector(`g[data-code='${code}']`);\n                if (!gEl) {\n                    return false;\n                }\n                const letterIndex = parseInt(gEl.dataset.letterindex);\n                let index = 0;\n                for (let char of chars) {\n                    if (this.replaceText(char) === '') {\n                        continue;\n                    }\n                    const cellEl = this.options.crosswordEl.querySelector(\n                        `g[data-word*='(${wordNumber})'][data-letterindex='${letterIndex + index}']`\n                    );\n                    // Interact with clue.\n                    if (cellEl) {\n                        cellEl.querySelector('text.crossword-cell-text').innerHTML = char;\n                        this.bindDataToClueInput(cellEl, char);\n                        cellEl.dispatchEvent(new Event('click'));\n                        index++;\n                    }\n                }\n\n                const nextCellEl = this.options.crosswordEl.querySelector(\n                    `g[data-word*='(${wordNumber})'][data-letteindex='${letterIndex + chars.length}']`\n                );\n                if (nextCellEl) {\n                    nextCellEl.dispatchEvent(new Event('click'));\n                }\n            }\n            return true;\n        });\n\n        inputEl.addEventListener('keyup', (event) => {\n            event.preventDefault();\n            const {wordNumber, cellWidth, cellHeight} = this.options;\n            const {key, target} = event;\n            const code = target.dataset.code;\n            const gEl = this.options.crosswordEl.querySelector(`g[data-code='${code}']`);\n            const letterIndex = parseInt(gEl.dataset.letterindex);\n            const previousCell = this.options.crosswordEl.querySelector(\n                `g[data-word*='(${wordNumber})'][data-letterindex='${letterIndex - 1}']`\n            );\n            const textEl = gEl.querySelector('text.crossword-cell-text');\n            let x = parseInt(gEl.querySelector('rect').getAttributeNS(null, 'x'));\n            let y = parseInt(gEl.querySelector('rect').getAttributeNS(null, 'y'));\n            if (key === this.DELETE || key === this.BACKSPACE) {\n                if (textEl.innerHTML === '') {\n                    if (previousCell) {\n                        previousCell.dispatchEvent(new Event('click'));\n                    }\n                } else {\n                    textEl.innerHTML = '';\n                    this.bindDataToClueInput(gEl, '_');\n                }\n            }\n            if ([this.ARROW_UP, this.ARROW_DOWN, this.ARROW_LEFT, this.ARROW_RIGHT].includes(key)) {\n                if (key === this.ARROW_UP) {\n                    y -= (cellHeight + 1);\n                }\n                if (key === this.ARROW_DOWN) {\n                    y += (cellHeight + 1);\n                }\n                if (key === this.ARROW_LEFT) {\n                    x -= (cellWidth + 1);\n                }\n                if (key === this.ARROW_RIGHT) {\n                    x += (cellWidth + 1);\n                }\n                const nextCell = this.options.crosswordEl.querySelector(`g rect[x='${x}'][y='${y}']`);\n                if (nextCell) {\n                    nextCell.closest('g').dispatchEvent(new Event('click'));\n                }\n            }\n        });\n\n        inputEl.addEventListener('click', (e) => {\n            const inputEl = e.target;\n            const code = inputEl.dataset.code;\n            const gEl = this.options.crosswordEl.querySelector(`g[data-code='${code}']`);\n            this.handleWordSelect(gEl);\n        });\n\n        inputEl.addEventListener('keydown', (e) => {\n            let {key} = e;\n            key = key.toLowerCase();\n            if (e.ctrlKey) {\n                if (\n                    key === this.Z_KEY ||\n                    key === this.A_KEY\n                ) {\n                    e.preventDefault();\n                }\n            }\n\n            if (e.key === this.ENTER) {\n                e.preventDefault();\n            }\n        });\n\n        inputEl.addEventListener('paste', (e) => {\n            e.preventDefault();\n        });\n    }\n\n    /**\n     * Add event to resize the screen width.\n     */\n    addEventResizeScreen() {\n        window.addEventListener('resize', () => {\n            const options = this.options;\n            const crossword = options.crosswordEl.querySelector('svg');\n            let width = options.colsNum * (options.cellWidth ?? 60 + 1) + 1;\n            if (window.innerWidth < 768 && !options.isSmall) {\n                width = options.colsNum * (options.cellSize[1] ?? 40 + 1) + 1;\n            }\n\n            if (window.innerWidth > 768 && options.isSmall) {\n                width = options.colsNum * (options.cellSize[0] ?? 60 + 1) + 1;\n            }\n            crossword.style.cssText = `width: ${width}px;`;\n            // Update cell input position whenever we resize the screen.\n            this.updatePositionForCellInput();\n        });\n    }\n}\n"],"names":["CrosswordGrid","CrosswordQuestion","constructor","options","buildBackgroundTable","colsNum","rowsNum","previewSetting","this","style","tableEl","document","createElement","className","backgroundColor","i","rowEl","j","squareEl","borderColor","color","classList","add","innerText","getColumnLabel","append","crosswordEl","innerHTML","outerHTML","addCell","words","length","row","startrow","column","startcolumn","answerLength","answer","realLength","allowLength","parseInt","invalidWord","clue","trim","isInvalidAnswer","orientation","number","querySelector","labelEl","label","_words$i2","no","spanEl","_words$i","letter","toUpperCase","contentEl","text","search","conflictColor","previewCrossword","buildCrossword","CrosswordClue","setUpClue","drawCrosswordSVG","syncDataForInit","addEventResizeScreen","cssText","width","svg","createElementNSFrom","viewBox","height","rectEl","x","y","createCrosswordBody","inputContainEl","createElementFrom","inputEl","type","maxlength","autocomplete","spellcheck","autocorrect","addEventForWordInput","attributes","element","createElementNS","key","setAttributeNS","setAttribute","cellWidth","cellHeight","isSmall","count","word","customAttribute","startRow","startColumn","position","calculatePosition","g","existingRectElement","textEl","existingNumberElement","closest","currentWord","dataset","appendCellNumber","addEventForG","wordNumber","textNumber","readonly","addEventListener","e","target","tagName","handleWordSelect","code","value","updatePositionForCellInput","focus","gEl","currentCell","coordinates","match","indexCell","indexOf","undefined","includes","find","o","updateLetterIndexForCells","toggleHighlight","focusClue","setStickyClue","rect","getBoundingClientRect","parentEl","inputWrapperEl","top","left","preventDefault","replaceText","letterIndex","letterindex","nextCellEl","bindDataToClueInput","dispatchEvent","Event","evt","stopPropagation","data","chars","split","index","char","cellEl","event","previousCell","getAttributeNS","DELETE","BACKSPACE","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","nextCell","toLowerCase","ctrlKey","Z_KEY","A_KEY","ENTER","window","crossword","innerWidth","cellSize"],"mappings":"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"}